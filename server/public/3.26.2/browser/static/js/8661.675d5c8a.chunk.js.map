{"version":3,"file":"static/js/8661.675d5c8a.chunk.js","mappings":"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","sources":["../../../node_modules/.pnpm/@babel+runtime-corejs3@7.16.8/node_modules/@babel/runtime-corejs3/core-js-stable/array/is-array.js","../../../node_modules/.pnpm/@babel+runtime-corejs3@7.16.8/node_modules/@babel/runtime-corejs3/core-js-stable/instance/bind.js","../../../node_modules/.pnpm/@babel+runtime-corejs3@7.16.8/node_modules/@babel/runtime-corejs3/core-js-stable/instance/find.js","../../../node_modules/.pnpm/@babel+runtime-corejs3@7.16.8/node_modules/@babel/runtime-corejs3/core-js-stable/instance/includes.js","xdk/devices/samsung-tizen/player/AVPlayer.js","../../../node_modules/.pnpm/@accedo+xdk-device-samsung-tizen@4.0.6_567d038adb0a2ca2afc20b8bd2695c13/node_modules/@accedo/xdk-device-samsung-tizen/esm/avplayProxy.js","../../../node_modules/.pnpm/@accedo+xdk-log@4.0.4_@accedo+xdk-config@4.0.2/node_modules/@accedo/xdk-log/esm/log.js"],"sourcesContent":["module.exports = require(\"core-js-pure/stable/array/is-array\");","module.exports = require(\"core-js-pure/stable/instance/bind\");","module.exports = require(\"core-js-pure/stable/instance/find\");","module.exports = require(\"core-js-pure/stable/instance/includes\");","/* eslint-disable func-names */\n/* eslint-disable consistent-return */\n/* eslint-disable no-else-return */\n/* eslint-disable new-cap */\n/* eslint-disable no-shadow */\n/* eslint-disable no-unused-vars */\n/* eslint-disable prefer-const */\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-undef */\n/* eslint-disable no-sequences */\n/**\n * The AVPlayer using webapis.avplay which is the tizen player supported by\n * Samsung. It provides video playback and support various DRMs and encryption.\n * @class samsung-tizen/player/AVPlayer\n */\nimport logger from '@accedo/xdk-log';\nimport xdk, {\n    klass,\n    core,\n    error,\n    IPlayer,\n    util,\n    Environment,\n    EventDispatcher,\n    promise,\n    MediaExtensionManager,\n    MediaExtensionConstants,\n    MediaConstants,\n    PlaybackErrorConstants,\n    PlayerConstants\n} from '@accedo/xdk-core';\n\nimport * as avplayProxy from '@accedo/xdk-device-samsung-tizen/esm/avplayProxy';\n\nconst { logError, warn, info, debug } = logger({\n    logTag: '[samsung-tizen/AVPlayer]'\n});\n\nconst { DRM: DRM_EXTENSION, SUBTITLE: SUBTITLE_EXTENSION } = MediaExtensionConstants.TYPE;\nconst { BUFFERING, DEFAULT_PARENT_NODE, EVENT: PLAYER_EVENT } = PlayerConstants;\nconst {\n    DRM: { AES_128, PLAYREADY, WIDEVINE },\n    PROTOCOL: { DASH, HLS, PROGRESSIVE, SMOOTH_STREAMING }\n} = MediaConstants;\n\nlet resolution = null;\nconst getScreen = (dimension) => tizen.systeminfo.getCapability(`http://tizen.org/feature/screen.${dimension}`);\nconst getResolution = () => {\n    if (!resolution) {\n        resolution = {\n            width: getScreen('width'),\n            height: getScreen('height')\n        };\n    }\n\n    return resolution;\n};\n\nconst system = () => {\n    const { system } = xdk;\n\n    if (!system) {\n        warn('AVPlayer trying to control screensaver without system.');\n    }\n\n    return system;\n};\n\nconst screenSaverOn = () => system()?.screenSaverOn();\nconst screenSaverOff = () => system()?.screenSaverOff();\n\nlet sEnv;\nconst AVPlayer = klass.create(\n    EventDispatcher,\n    [IPlayer],\n    {\n        SINGLE_PLAYER_ONLY: true,\n        PRELOADABLE: false\n    },\n    {\n        /**\n         * Constant to store Tizen's AVPlayPlayerStates\n         * @name __PLAYER_STATE\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __PLAYER_STATE: {\n            NONE: 'none',\n            IDLE: 'idle',\n            READY: 'ready',\n            PLAYING: 'playing',\n            PAUSED: 'paused'\n        },\n        /**\n         * To store the player id\n         * @name __id\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __id: null,\n\n        /**\n         * To store the status whether the object is prepared\n         * @name __prepared\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __prepared: false,\n\n        /**\n         * To store if prepareAsync is currently in progress.\n         * @name __preparing\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __preparing: false,\n\n        /**\n         * To determine whether the avplayer is loaded or not\n         * @name __loaded\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __loaded: false,\n\n        /**\n         * To store the status whether the player is connected\n         * @name __connected\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __connected: false,\n\n        /**\n         * Time out(sec) for the player connection\n         * @name __connectionTimeLimit\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __connectionTimeLimit: 90,\n\n        /**\n         * Time out (sec) for the player buffering\n         * @name __bufferingTimeLimit\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __bufferingTimeLimit: 10,\n\n        /**\n         * player current time\n         * @name __currentTime\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __currentTime: 0,\n\n        /**\n         * player playback speed\n         * @name __playbackSpeed\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __playbackSpeed: 1,\n\n        /**\n         * withhold play\n         * @name __withholdPlay\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __withholdPlay: false,\n\n        /**\n         * Withhold stop, this flag will be raised when stopPlayback is called\n         * and reset when play is called. This flag is only being checked within\n         * the prepareSuccess handler. Without this flag, prepareSuccess will\n         * proceed with playing of a video even when a stop has been requested\n         * during the short period of asynchronous prepare.\n         *\n         * @name __withholdStop\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __withholdStop: false,\n\n        /**\n         * player seek time\n         * @name __seekTime\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __seekTime: 0,\n\n        /**\n         * Protocol\n         * @name __protocol\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __protocol: null,\n\n        /**\n         * Media options\n         * @name __mediaOption\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __mediaOption: null,\n\n        /**\n         * Media url\n         * @name __url\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __url: null,\n\n        /**\n         * Media's DRM setting\n         * @name __drm\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __drm: null,\n\n        /**\n         * the player extension manager\n         * @name _extensionManager\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @protected\n         */\n        _extensionManager: null,\n\n        /**\n         * flag to check if there is pending play function to be triggered after load\n         * @name __isPendingPlay\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __isPendingPlay: false,\n\n        /**\n         * cache second to play for pendingPlay\n         * @name __secondToPlay\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __secondToPlay: null,\n\n        /**\n         * cache doLoad promise to prevent doLoad being called twice in load or play.\n         * @name __doLoadPromise\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __doLoadPromise: null,\n\n        /**\n         * player config\n         * @name __playerConfig\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __playerConfig: null,\n\n        init(playerConfig, extensionManager) {\n            this._extensionManager = extensionManager;\n\n            if (playerConfig) {\n                debug('get the config');\n                this.__playerConfig = playerConfig;\n\n                this.__connectionTimeLimit = playerConfig['connection-timeout'] || this.__connectionTimeLimit;\n                this.__bufferingTimeLimit = playerConfig['buffering-timeout'] || this.__bufferingTimeLimit;\n            }\n\n            sEnv = Environment.singleton();\n\n            if (!webapis || !webapis.avplay) {\n                throw new error.IllegalState('Fail to load the AVPlayer API.');\n            }\n        },\n\n        /**\n         * Gets the player's config\n         * @method getPlayerConfig\n         * @returns {Object} the player's configuration\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @public\n         */\n        getPlayerConfig() {\n            return this.__playerConfig;\n        },\n\n        /**\n         * To get the capabilities of the player.\n         * @method getCapabilities\n         * @returns {interfaces/Player~PlayerCapabilities}\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @public\n         */\n        getCapabilities() {\n            return {\n                protocol: [SMOOTH_STREAMING, PROGRESSIVE, HLS, DASH],\n                drm: [AES_128, PLAYREADY, WIDEVINE]\n            };\n        },\n\n        /**\n         * To prepare the video and create the drm agent if necessary.\n         * @method prepare\n         * @param {Object}  [option]  extra parameter needed for the URL\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @public\n         */\n        prepare(option) {\n            if (this.__prepared) {\n                return;\n            }\n\n            // NOTE: Until XDK pseudo-interface implementation is removed.\n            // We cannot use ES6 default parameter as it will be transpiled\n            // into a function that will failed pseudo-interface runtime test.\n            option = option || {};\n\n            if (!option.parentNode) {\n                option.parentNode = DEFAULT_PARENT_NODE;\n            }\n\n            this.__parentNode = option.parentNode;\n\n            // Prepare for the player object.\n            this.__playerObject = this.__createPlayerObject();\n            this.__parentNode.appendChild(this.__playerObject);\n\n            // TODO\n            this.__subtitleContainer = this._createSubtitleContainer();\n            this.__subtitleText = this._createSubtitleText();\n            this.__showingSubtitle = false;\n            this.__subtitleContainer.appendChild(this.__subtitleText);\n            this.__parentNode.appendChild(this.__subtitleContainer);\n            this.__subtitlesTimer = null;\n\n            this.__prepared = true;\n\n            // Handle the player suspend and restore.\n            sEnv.addEventListener(sEnv.SYSTEM.RESUME, this.__handleResume);\n            sEnv.addEventListener(sEnv.SYSTEM.SUSPEND, this.__handlePause);\n\n            // If extension manager is removed in reset, we have to prepare it.\n            if (!this._extensionManager && this.__playerConfig) {\n                this._extensionManager = new MediaExtensionManager(this.__playerConfig.extensions);\n            }\n        },\n\n        getVideoSize() {\n            const { videoWidth: width, videoHeight: height } = this.__playerObject;\n\n            return { width, height };\n        },\n\n        __createPlayerObject() {\n            const avPlayerObject = document.createElement('object');\n\n            avPlayerObject.setAttribute('id', 'av-player');\n            avPlayerObject.setAttribute('type', 'application/avplayer');\n            //    avPlayerObject.setAttribute('style', 'width:100%;height:100%;');\n\n            return avPlayerObject;\n        },\n\n        // TODO\n        _createSubtitleContainer() {\n            const e = document.createElement('div');\n            return (\n                e.setAttribute('style', 'visibility:hidden;'),\n                e.setAttribute('id', 'av-player-subtitles-container'),\n                e.setAttribute('class', 'avplayer internal-subtitle'),\n                e\n            );\n        },\n\n        // TODO\n        _createSubtitleText() {\n            const e = document.createElement('div');\n            return e.setAttribute('class', 'text'), e.setAttribute('id', 'av-player-subtitles-text'), e;\n        },\n\n        // TODO\n        __showSubtitleContainer(enable) {\n            if (enable) {\n                this.__showingSubtitle = true;\n                this.__subtitleContainer.setAttribute('style', 'visibility:visible;');\n                return;\n            }\n            this.__showingSubtitle = false;\n            this.__subtitleContainer.setAttribute('style', 'visibility:hidden;');\n        },\n\n        _getPlayerObject() {\n            return this.__playerObject;\n        },\n\n        /**\n         * pause the avplayer when it is suspended.\n         * @method __handlePause\n         * @private\n         * @memberof samsung-tizen/player/AVPlayer#\n         */\n        __handlePause() {\n            return avplayProxy.suspend();\n        },\n\n        /**\n         * Restore the AVPlayer when the app is resumed. If the player was\n         * playing a video when the app went suspended, the player will resume\n         * playing the same video, began at the timestamp when the app was\n         * suspended.\n         *\n         * @method __handleResume\n         * @private\n         * @memberof samsung-tizen/player/AVPlayer#\n         */\n        __handleResume() {\n            // XDK-3406 prioritize UI then restore avplayer state.\n            util.defer().then(() => {\n                avplayProxy.restore();\n            });\n        },\n\n        /**\n         * resets the video player, to non-playing mode\n         * @method\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @protected\n         */\n        reset() {\n            this.__preparing = false;\n            if (!this.__prepared) {\n                return;\n            }\n\n            this.__prepared = false;\n            this.__hide();\n            this.__parentNode.removeChild(this.__playerObject);\n            this.__playerObject = null;\n            // TODO\n            this.__parentNode.removeChild(this.__subtitleContainer);\n            this.__subtitleContainer = null;\n            this.__subtitleText = null;\n            clearTimeout(this.__subtitlesTimer);\n            this.__subtitlesTimer = null;\n\n            this.__connected = false;\n            this.__loaded = false;\n            this.__currentTime = 0;\n            this.__playbackSpeed = 1;\n            this.__withholdPlay = false;\n            this.__seekTime = 0;\n            this.__protocol = null;\n            this.__mediaOption = null;\n            this.__url = null;\n            this.__drm = null;\n            this.__isPendingPlay = false;\n            this.__secondToPlay = null;\n            this.__doLoadPromise = null;\n\n            sEnv.removeEventListener(sEnv.SYSTEM.RESUME, this.__handleResume);\n            sEnv.removeEventListener(sEnv.SYSTEM.SUSPEND, this.__handlePause);\n\n            if (this._extensionManager) {\n                this._extensionManager.deinit();\n            }\n            this._extensionManager = null;\n\n            screenSaverOn();\n        },\n\n        /**\n         * The \"do-er\" function that performs the doLoad action, if the action\n         * passed the checks happens in the {@link #load} function.\n         *\n         * If the {@link #__doLoadPromise} has already been created, its\n         * `.complete` cascade will be returned.\n         *\n         * If the {@link __doLoadPromise} has NOT been created, this function\n         * will call {@link __newDoLoadPromise} to create the promise, and\n         * its `.complete` cascade will be returned.\n         *\n         * @method\n         * @param {String} mediaURL - The URL of the stream.\n         * @param {Object} option - The media options.\n         * @returns {module:base/promise~Promise.<T>} - A promise that will be\n         * resolved when loading completed, or rejected if loading failed. The\n         * private reference, helding by this AVPlayer, will be nullified\n         * whenever loading is completed, whether it is resolved or rejected.\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __doLoad(mediaURL, option) {\n            debug(`player.__doLoad: invoked: ${mediaURL}`);\n\n            if (!this.__doLoadPromise) {\n                debug('player.__doLoad: Create a new doLoad Promise.');\n                this.__doLoadPromise = this.__newDoLoadPromise(mediaURL, option);\n            }\n\n            return this.__doLoadPromise.complete(\n                util.bind(function () {\n                    debug('player.__doLoad: Clearing doLoad reference.');\n                    this.__doLoadPromise = null;\n                }, this)\n            );\n        },\n\n        /**\n         * Construct a new doLoad promise whenever a this function is called.\n         *\n         * @constructs doLoadPromise\n         * @param {String} mediaURL - The URL of the stream.\n         * @param {Object} option - The media options.\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __newDoLoadPromise(mediaURL, option) {\n            return new promise.promise((resolve, reject) => {\n                let operationResult;\n\n                debug('doLoadPromise: Begin...');\n\n                if (!this.__isState(this.__PLAYER_STATE.NONE)) {\n                    debug('doLoadPromise: Current state is not NONE. Close it first.');\n\n                    operationResult = avplayProxy.close();\n\n                    if (operationResult === avplayProxy.INVALID) {\n                        // AVPlayer state machine changed in firmware 1141\n                        // means calling close too early will cause error\n                        info('Error occurred due to close being called too early.');\n                    }\n\n                    debug('doLoadPromise: AVPlayer is now closed.');\n                }\n\n                debug(`doLoadPromise: Open the mediaURL: ${mediaURL}`);\n\n                operationResult = avplayProxy.open(mediaURL);\n\n                info(`Initialize the player result: ${operationResult}`);\n\n                // Tizen's setListener has no unsetListener counterpart and is\n                // safe to be called multiple times.\n                operationResult = avplayProxy.setListener({\n                    onbufferingstart: util.bind(this.__onBufferingStart, this),\n                    onbufferingprogress: util.bind(this.__onBufferingProgress, this),\n                    onbufferingcomplete: util.bind(this.__onBufferingComplete, this),\n                    oncurrentplaytime: util.bind(this.__onCurrentPlayTime, this),\n                    onstreamcompleted: util.bind(this.__onFinished, this),\n                    onevent: util.bind(this.__onEventCallback, this),\n                    onerror: util.bind(this.__onError, this),\n                    ondrmevent: util.bind(this.__onDRMCallback, this),\n                    onsubtitlechange: util.bind(this.__onSubtitleCallback, this)\n                });\n\n                info(`setListener result: ${operationResult}`);\n\n                this.__prepareDrm(option).then(resolve, reject);\n            });\n        },\n\n        /**\n         * Subroutine of __newDoLoadPromise, which handle the instantiation\n         * of DRM Agent only.\n         *\n         * This function returns native Promise, but because Tizen's\n         * remote debugger doesn't support async keyword, this function\n         * simply return Promise instead.\n         *\n         * @param {Object} option Option object from doLoadPromise\n         * @returns {Promise} Native Promise.\n         */\n        __prepareDrm(option) {\n            const { drm } = option;\n\n            // No DRM settings are needed for HLS with AES 128 as well.\n            if (!drm || drm === AES_128) {\n                debug('doLoadPromise: DRM Ext not needed. Job done.');\n\n                return Promise.resolve();\n            }\n\n            const { drm: supportedDRM = [] } = this.getCapabilities();\n\n            if (!supportedDRM.includes(drm)) {\n                return Promise.reject(new error.IllegalArgument(`DRM '${drm}' is not supported`));\n            }\n\n            const { _extensionManager: extMgr } = this;\n\n            if (!extMgr || !extMgr.isExtensionSupported(DRM_EXTENSION)) {\n                return Promise.reject(new error.UnsupportedOperation('DRM extension is not defined properly.'));\n            }\n\n            return extMgr\n                .getExtension(DRM_EXTENSION)\n                .then((extension) => extension.createDRMAgent(drm))\n                .then((drmAgent) => drmAgent.prepare(option, avplayProxy));\n        },\n\n        /**\n         * Get the Media Url adding the proper http(s) protocol to allow playback\n         *\n         * @method __getMediaUrlWithProtocolIfApplies\n         * @returns {string} the mediaUrl updated or not\n         * @private\n         */\n        __getMediaUrlWithProtocolIfApplies(mediaURL) {\n            const isProtocolRelativeUrl = util.isProtocolRelative(mediaURL);\n            let mediaUrlWithProtocol = mediaURL;\n\n            if (isProtocolRelativeUrl) {\n                mediaUrlWithProtocol = util.protocolRelativeToAbsolute(mediaURL);\n            }\n\n            return mediaUrlWithProtocol;\n        },\n\n        /**\n         * To set the URL and load the video.\n         * @method load\n         * @param {String}  mediaURL  url the URL address of the media\n         * @param {Object}  [option]  extra parameter needed for the URL\n         * @param {String} [option.drm] DRM technology to use\n         * @param {String} [option.type] media container format to use\n         * @param {String} [option.drmURL] (PlayReady|Widevine) Set the DRM license URL\n         * @param {String} [option.cookie] (PlayReady) Set the COOKIE information for PlayReady\n         * @param {String} [option.customData] (PlayReady) to set custom data\n         * @param {String} [option.httpHeader] (PlayReady) add custom http header\n         * @param {String} [option.soapHeader] (PlayReady) add custom soap header\n         * @param {String} [option.deleteLicenseAfterUse] (PlayReady) Enable deletion of license after use.\n         * @param {String} [option.userData] (Widevine) Set the user data\n         * @param {String} [option.deviceTypeId] (Widevine)the device type id when using widevine\n         * @param {String} [option.drmCurTime] (Widevine) cur time param when using widevine\n         * @param {String} [option.iSeek] (Widevine) i-seek param when using widevine\n         * @param {String} [option.portal] (Widevine)portal param when using widevine\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @public\n         */\n        load(mediaURL, option) {\n            let operationResult;\n\n            if (!this.__prepared) {\n                return false;\n            }\n\n            if (this.__isState(this.__PLAYER_STATE.PLAYING) || this.__isState(this.__PLAYER_STATE.PAUSED)) {\n                this.stop();\n            }\n\n            if (option.parentNode && this.__parentNode !== option.parentNode) {\n                this.__parentNode.removeChild(this.__playerObject);\n                this.__parentNode = option.parentNode;\n                this.__parentNode.appendChild(this.__playerObject);\n            }\n\n            const mediaUrlWithProtocol = this.__getMediaUrlWithProtocolIfApplies(mediaURL);\n\n            debug(`[debug] mediaUrlWithProtocol: ${mediaUrlWithProtocol}`);\n\n            this.__url = mediaUrlWithProtocol;\n            this.__mediaOption = option;\n            this.__connected = false;\n\n            this.__protocol = option.protocol || null;\n            this.__drm = option.drm || null;\n\n            this.__hide();\n\n            this.__doLoad(mediaUrlWithProtocol, option)\n                .then(\n                    util.bind(function () {\n                        operationResult = avplayProxy.setTimeoutForBuffering(this.__bufferingTimeLimit);\n                        info(`set timeout for buffering result: ${operationResult}`);\n\n                        this.__loaded = true;\n\n                        if (this.__isPendingPlay) {\n                            info('Pending Play is triggered (by the Player Event using the State machine) after load is done.');\n                            info('[AVPlay] load FORCE_PLAY');\n                            this.dispatchEvent(PLAYER_EVENT.FORCE_PLAY, this.__secondToPlay);\n                            this.__isPendingPlay = false;\n                            this.__secondToPlay = null;\n                        }\n                    }, this)\n                )\n                .done();\n        },\n\n        /**\n         * To hide the player.\n         * @method __hide\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __hide() {\n            if (!this.__playerObject) {\n                return;\n            }\n            this.__playerObject.style.visibility = 'hidden';\n        },\n\n        /**\n         * To show the player.\n         * @method __show\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __show() {\n            if (!this.__playerObject) {\n                return;\n            }\n            this.__playerObject.style.visibility = 'visible';\n        },\n\n        /**\n         * On buffering start callback.\n         * @method __onBufferingStart\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __onBufferingStart() {\n            info('[XDK AVPlayer] Buffering start');\n            this.dispatchEvent(PLAYER_EVENT.BUFFERING, BUFFERING.START);\n        },\n\n        /**\n         * On buffering progress callback.\n         * @method __onBufferingProgress\n         * @param {Number} percent the percentage of the buffering progress\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __onBufferingProgress(percent) {\n            this.dispatchEvent(PLAYER_EVENT.BUFFERING, BUFFERING.PROGRESS, percent);\n        },\n\n        /**\n         * Buffering complete callback.\n         * @method __onBufferingComplete\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __onBufferingComplete() {\n            // Delay the buffering complete when it is not yet connected.\n            this.__delayBufferingComplete = !this.__connected;\n\n            if (!this.__connected) {\n                return;\n            }\n\n            this.dispatchEvent(PLAYER_EVENT.BUFFERING, BUFFERING.FINISH);\n        },\n\n        /**\n         * prepareAsync onsuccess handler, which will be fired after the first\n         * buffering completed.\n         *\n         * @method __prepareSuccess\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __prepareSuccess() {\n            this.__preparing = false;\n\n            info(\n                `__prepareSuccess seekTime: ${this.__seekTime}, withholdPlay: ${this.__withholdPlay}, withholdStop: ${this.__withholdStop}`\n            );\n\n            if (this.__withholdStop) {\n                info('Stop has been requested before prepareAsync finished. Not going to play the stream.');\n\n                return;\n            }\n\n            let seekTime = this.__seekTime;\n\n            this.__connected = true;\n\n            if (!util.isUndefined(seekTime) && seekTime >= 0) {\n                this.__withholdPlay = true;\n\n                // XDK-2616 Fail to seekTo second in aes-128,\n                // use jumpForward instead of seek.\n                if (this.__drm === AES_128) {\n                    avplayProxy.jumpForward(seekTime * 1000);\n                } else {\n                    this.seek(seekTime);\n                }\n\n                this.__seekTime = 0;\n            }\n\n            // to change the state into buffering complete which is delayed\n            if (this.__delayBufferingComplete) {\n                this.dispatchEvent(PLAYER_EVENT.BUFFERING, BUFFERING.FINISH);\n            }\n\n            if (this.__withholdPlay) {\n                this.__withholdPlay = false;\n                this.__stopScreenSaverAndPlay();\n            }\n        },\n\n        /**\n         * It will be fired the prepareAsync fail callback.\n         * @method __prepareFail\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __prepareFail() {\n            this.__preparing = false;\n            let RENDER_FAILED = PlaybackErrorConstants.ERROR.RENDER.FAILED;\n\n            this.__stopPlayback();\n\n            debug('Failed to prepare the video.');\n            this.dispatchEvent(PLAYER_EVENT.ERROR, RENDER_FAILED);\n        },\n\n        /**\n         * Stop the screensaver regardlessly and trying to play the video. If\n         * the player is already in playing state before the play command is\n         * issued, no error will be returned.\n         *\n         * @method __stopScreenSaverAndPlay\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         * @return {*} Return what {@link samsung-tizen/avplayProxy#play}\n         *             can return.\n         */\n        __stopScreenSaverAndPlay() {\n            screenSaverOff();\n\n            if (!this.__isState(this.__PLAYER_STATE.PLAYING)) {\n                avplayProxy.play();\n            }\n        },\n\n        /**\n         * The current play time update callback.\n         * @method __onCurrentPlayTime\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __onCurrentPlayTime(currentTime) {\n            this.__currentTime = currentTime / 1000;\n\n            this.dispatchEvent(PLAYER_EVENT.TIME_UPDATE, this.getCurrentTime());\n        },\n\n        /**\n         * The event callback.\n         * @method __onEventCallback\n         * @param {String} eventType the type of event\n         * @param {String} eventData data of the event\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __onEventCallback(eventType, eventData) {\n            info(`__onEventCallback: ${eventType}, ${eventData}`);\n        },\n\n        /**\n         * The subtitle event callback.\n         * @method __onSubtitleCallback\n         * @param {Number} duration the time\n         * @param {String} text of the subtitle\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __onSubtitleCallback(duration, text) {\n            info(`__onSubtitleCallback: duration: ${duration}, text: ${text}`);\n\n            this.dispatchEvent(PLAYER_EVENT.SUBTITLE_UPDATE, {\n                duration,\n                text\n            });\n\n            clearTimeout(this.__subtitlesTimer);\n\n            // TODO\n            this.updateSubtitles(text);\n            // the e param is the length of time to display the subtitle for in milliseconds\n            // create a basic setTimeout upon which to set the contents of the div to \"\" (empty)\n            // there is a .text:empty selector in tizen.scss which then sets the div to display:none\n            this.__subtitlesTimer = setTimeout(() => {\n                if (this.__isState(this.__PLAYER_STATE.PLAYING)) {\n                    this.clearSubtitles();\n                }\n            }, e);\n        },\n\n        /**\n         * The drm callback\n         * @method __onDRMCallback\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __onDRMCallback(drmEvent, drmData) {\n            info(`__onDRMCallback: ${drmEvent}, ${drmData}`);\n        },\n\n        /**\n         * Called when the video finish.\n         * @method __onFinished\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __onFinished() {\n            // TODO\n            this.clearSubtitles();\n            this.__showSubtitleContainer(false);\n\n            info('__onFinished');\n            this.__stopPlayback();\n\n            this.dispatchEvent(PLAYER_EVENT.FINISHED);\n        },\n\n        /**\n         * AVPlayer's private callback when a player error occurred.\n         *\n         * @method __onError\n         * @param  {Number} eventType - The event type.\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __onError(eventType) {\n            let GENERIC_UNKNOWN = PlaybackErrorConstants.ERROR.GENERIC.UNKNOWN;\n\n            this.__stopPlayback();\n\n            logError(`onError: ${eventType}`);\n            this.dispatchEvent(PLAYER_EVENT.ERROR, GENERIC_UNKNOWN);\n        },\n\n        /**\n         * Stop the play.\n         * @method __stopPlayback\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __stopPlayback() {\n            // TODO\n            this.clearSubtitles();\n            this.__showSubtitleContainer(false);\n\n            let stopResult = avplayProxy.stop();\n\n            info(`Stop playback: ${stopResult}`);\n\n            screenSaverOn();\n\n            this.__hide();\n\n            // Reset the witholdPlay flag to avoid the video to be played when\n            // buffering complete.\n            this.__withholdPlay = false;\n\n            // Raise the withholdStop flag to avoid __prepareSuccess from\n            // beginning to play the video.\n            this.__withholdStop = true;\n\n            this.__connected = false;\n            this.__loaded = false;\n            this.__preparing = false;\n\n            this.__isPendingPlay = false;\n            this.__secondToPlay = null;\n            this.__doLoadPromise = null;\n\n            return stopResult;\n        },\n\n        /**\n         * Play the video item.\n         * @method play\n         * @param {Number} second - Play the video at the specified second\n         * @returns {Boolean} true - if the play action was successful to allow the FSM to transition.\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @public\n         */\n        play(second) {\n            info(`play is called. second: ${second}`);\n\n            if (this.__doLoadPromise) {\n                info('Please wait while doLoad is running...');\n\n                this.__secondToPlay = second;\n                this.__isPendingPlay = true;\n\n                return false;\n            }\n\n            if (this.__preparing) {\n                info('Please wait while Tizen taking forever to prepare...');\n\n                return false;\n            }\n\n            this.__withholdPlay = false;\n            this.__withholdStop = false;\n            this.__seekTime = 0;\n\n            this.__show();\n\n            this.__maybeLoad().then(util.bind(this.__doPlay, this, second)).done();\n\n            return true;\n        },\n\n        /**\n         * Utility function for play to determine if __doLoad needs to be called\n         * before __doPlay.\n         *\n         * @method __maybeLoad\n         * @returns {Promise} XDK Promise.\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __maybeLoad() {\n            let drm = this.__drm;\n\n            let connectedOrLoaded = this.__connected || this.__loaded;\n\n            let drmNeedReload = drm === WIDEVINE || drm === PLAYREADY;\n\n            let log = '';\n\n            let vow;\n\n            if (!connectedOrLoaded && drmNeedReload) {\n                log += 'doLoad is needed before doPlay can be called.';\n                vow = this.__doLoad(this.__url, this.__mediaOption);\n            } else {\n                log += 'doPlay can be called without a reload.';\n                vow = promise.resolve();\n            }\n\n            info(log);\n\n            return vow;\n        },\n\n        /**\n         * Assists with playing the video.\n         * @method __doPlay\n         * @param {Number} second - Play the video at the specified second\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __doPlay(second) {\n            info(`doPlay. second: ${second}`);\n\n            this.__seekTime = second;\n\n            let isSpeeding;\n            let seekResult;\n\n            if (!this.__connected) {\n                // from idle state to ready state\n                this.__withholdPlay = true;\n\n                debug('doPlay. Not connected. prepareAsync may be needed.');\n\n                if (!this.__preparing) {\n                    debug('doPlay: Not preparing. prepareAsync will be called.');\n\n                    this.__preparing = true;\n\n                    // there are two ways (prepare and prepareAsync), prepare will run synchronous and may block the process.\n                    // Replaced with prepareAsync, it will undergo the flow asynchronously(buffering start, buffering complete and the prepareAsync success callback)\n                    // If play in buffering start/complete, it will throw error. So the seeking and withhold play handling will be placed inside the prepareAsync callback.\n                    avplayProxy.prepareAsync(util.bind(this.__prepareSuccess, this), util.bind(this.__prepareFail, this));\n                } else {\n                    info('doPlay: Already preparing. Not calling again.');\n                }\n            }\n\n            if (!util.isUndefined(second) && second >= 0) {\n                // perform directly if paused, playing, speeding\n                if (this.__isState(this.__PLAYER_STATE.PAUSED)) {\n                    if (this.__stopScreenSaverAndPlay() === avplayProxy.INVALID) {\n                        logError('Play failed.');\n\n                        return false;\n                    }\n\n                    seekResult = this.seek(second);\n\n                    return !util.isUndefined(seekResult) ? seekResult : true;\n                } else if (this.__isState(this.__PLAYER_STATE.PLAYING)) {\n                    seekResult = this.seek(second);\n\n                    return !util.isUndefined(seekResult) ? seekResult : true;\n                } else {\n                    this.__withholdPlay = true;\n                }\n            }\n\n            if (this.__isState(this.__PLAYER_STATE.PLAYING)) {\n                debug('player.__doPlay: Stream is playing. Done.');\n\n                return true;\n            }\n\n            isSpeeding = this.__playbackSpeed > 1;\n\n            // run only if it is not withhold and not speeding.\n            // it will cause error when call play again during speeding\n            if (!this.__withholdPlay && !isSpeeding) {\n                debug('player.__doPlay: Stop screensaver and play...');\n\n                if (this.__stopScreenSaverAndPlay() === avplayProxy.INVALID) {\n                    logError('Play failed.');\n\n                    return false;\n                }\n\n                debug('player.__doPlay: Stream is now playing. Done.');\n\n                return true;\n            }\n        },\n\n        /**\n         * Get the AVPlayer's state.\n         * @method __getState\n         * @returns {String} AVPlayer state\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __getState() {\n            return avplayProxy.getState().toLowerCase();\n        },\n\n        /**\n         * Check the AVPlayer's state.\n         * @method __isState\n         * @param {String} state to check against AVPlayer state.\n         * @returns {Boolean}\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @private\n         */\n        __isState(state) {\n            return this.__getState() === state;\n        },\n\n        /**\n         * Stop the video playback.\n         * @method stop\n         * @returns {Boolean} true\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @public\n         */\n        stop() {\n            let stopResult = this.__stopPlayback();\n\n            if (!util.isUndefined(stopResult)) {\n                return stopResult;\n            }\n\n            // TODO: test return this.__isState(this.__PLAYER_STATE.IDLE);\n            return true;\n        },\n\n        /**\n         * Pause the video.\n         * @method pause\n         * @return {Boolean} true\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @public\n         */\n        pause() {\n            if (avplayProxy.pause() === avplayProxy.INVALID) {\n                logError('Pause failed.');\n\n                return false;\n            }\n\n            screenSaverOn();\n\n            this.__withholdPlay = false;\n\n            this.__updateCurrentTime();\n\n            return this.__isState(this.__PLAYER_STATE.PAUSED);\n        },\n\n        /**\n         * Resume playing the video.\n         * @method resume\n         * @public\n         * @memberof samsung-tizen/player/AVPlayer#\n         */\n        resume() {\n            if (this.__stopScreenSaverAndPlay() === avplayProxy.INVALID) {\n                logError('Resume failed.');\n\n                return false;\n            }\n\n            return this.__isState(this.__PLAYER_STATE.PLAYING);\n        },\n\n        /**\n         * Seek to specific position of the video.\n         * Tizen supports:\n         *  -32x, -16x, -8x, -4x, -2x, -1x, 1x, 2x, 4x, 8x, 16x, 32x\n         * @method seek\n         * @param {Number} second the position to seek to in seconds\n         * @memberof samsung-tizen/player/AVPlayer#\n         */\n        seek(second) {\n            // TODO\n            // when we seek we need to clear out the subtitles so that they don't linger on screen\n            clearTimeout(this.__subtitlesTimer);\n            this.clearSubtitles();\n\n            let isSpeeding = this.__playbackSpeed > 1;\n\n            // No response when seekTo 0, so convert to second from 0s to 1s,\n            // which will be further converted into 1000ms.\n            // XDK-2612 Fail to seek time to 0 in asf, so try to standardise\n            // all media to 0.5s. The device will start at 0 in fact.\n            if (second === 0) {\n                second = 0.5;\n            }\n\n            // Since it is so strange when seek close to the duration and result\n            // in no response, the maximum value for the seek will be a second\n            // before the end and then convert the time to ms format.\n            second = Math.min(this.getDuration() - 1, second) * 1000;\n\n            // To seek a video, we need to set the playing speed back to 1.\n            if (isSpeeding) {\n                avplayProxy.setSpeed(1);\n            }\n\n            if (avplayProxy.seekTo(second) === avplayProxy.INVALID) {\n                logError('Seek failed.');\n\n                return false;\n            }\n\n            // Rollback the speeding status.\n            if (isSpeeding) {\n                avplayProxy.setSpeed(this.__playbackSpeed);\n            }\n\n            this.__updateCurrentTime();\n\n            return true;\n        },\n\n        /**\n         * Update the current time automatically.\n         * @method __updateCurrentTime\n         * @private\n         * @memberof samsung-tizen/player/AVPlayer#\n         */\n        __updateCurrentTime() {\n            let currentTime = avplayProxy.getCurrentTime();\n\n            if (currentTime !== avplayProxy.INVALID) {\n                this.__onCurrentPlayTime(currentTime);\n            }\n        },\n\n        /**\n         * Skip the playback forward/backward for certain seconds\n         * @method skip\n         * @param {Number} second number of seconds to skip (10 by default)\n         * @public\n         * @memberof samsung-tizen/player/AVPlayer#\n         */\n        skip(second) {\n            let isSpeeding = this.__playbackSpeed > 1;\n\n            let limit = this.getDuration() - 2;\n\n            let current = this.getCurrentTime();\n\n            let skipResult;\n\n            // To skip a video, we need to set the playing speed back to 1.\n            if (isSpeeding) {\n                avplayProxy.setSpeed(1);\n            }\n\n            // XDK-2620 Sometimes, it will stuck when skipping but in fact it\n            // skips properly adding try catch make it not blocking to the player.\n            if (second < 0) {\n                skipResult = avplayProxy.jumpBackward(-second * 1000);\n            } else {\n                second = current + second >= limit ? limit - current : second;\n                skipResult = avplayProxy.jumpForward(second * 1000);\n            }\n\n            if (skipResult === avplayProxy.INVALID) {\n                logError('Skip failed.');\n            }\n\n            // Roll back the speeding.\n            if (isSpeeding) {\n                avplayProxy.setSpeed(this.__playbackSpeed);\n            }\n\n            // Since it won't update the current time when paused or skipping,\n            // so update the time directly.\n            if (this.__isState(this.__PLAYER_STATE.PAUSED)) {\n                // TODO: investigate -> || this.__isState(this.__PLAYER_STATE.SKIPPING)) {\n                this.__updateCurrentTime();\n            }\n\n            return true;\n        },\n\n        /**\n         * Speed up/down the media playback, media with drm aes-128 or type hls fail to speed\n         * @method speed\n         * @param {Number} speed the playback speed to set\n         * @memberof samsung-tizen/player/AVPlayer#\n         */\n        speed(speed) {\n            let speedResult;\n\n            // Speeding for aes-128, HLS, and DASH disabled since it is not\n            // possible due to device limitation\n            if (this.__drm === AES_128 || this.__protocol === HLS || this.__protocol === DASH) {\n                warn('Speed is not supported for this type.');\n\n                return false;\n            }\n\n            // from -8x to 8x, it will give \"UNKNOWN_ERROR_EVENT_FROM_PLAYER\" when calling 16x.\n            if (speed > 8) {\n                speed = 8;\n            }\n\n            if (speed < -8) {\n                speed = -8;\n            }\n\n            // We need to play the stream first or speeding will fail.\n            if (this.__isState(this.__PLAYER_STATE.PAUSED)) {\n                this.__stopScreenSaverAndPlay();\n            }\n\n            speedResult = avplayProxy.setSpeed(speed);\n\n            if (speedResult === avplayProxy.INVALID) {\n                logError('Speed failed.');\n\n                return false;\n            }\n\n            this.__playbackSpeed = speed;\n\n            // TODO: test return this.__isState(this.__PLAYER_STATE.PLAYING);\n            return true;\n        },\n\n        /**\n         * To get the playback speed.\n         * @method getPlaybackSpeed\n         * @returns {Integer} playback speed value.\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @public\n         */\n        getPlaybackSpeed() {\n            return this.__playbackSpeed;\n        },\n\n        /**\n         * Sets video window size\n         * @method setVideoSizeAndPosition\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @public\n         */\n        setVideoSizeAndPosition(param) {\n            let innerWidth = core.root.innerWidth || 0;\n\n            let ratio = innerWidth / getResolution().width;\n\n            this.__playerObject.style.left = `${param.left}px`;\n            this.__playerObject.style.top = `${param.top}px`;\n            this.__playerObject.style.width = `${param.width}px`;\n            this.__playerObject.style.height = `${param.height}px`;\n\n            // XDK-3095 since the avplayer is always the same with system\n            // resolution and independent of viewport size, set the right size\n            // according to the ratio.\n            avplayProxy.setDisplayRect(param.left / ratio, param.top / ratio, param.width / ratio, param.height / ratio);\n        },\n\n        /**\n         * set the video to be full screen\n         * @method setFullscreen\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @public\n         */\n        setFullscreen() {\n            let window = core.root;\n\n            // XDK-3095 Full screen should be with respect to application\n            // size, which may be viewport size or system screen size.\n            this.setVideoSizeAndPosition({\n                top: 0,\n                left: 0,\n                height: window.innerHeight,\n                width: window.innerWidth\n            });\n        },\n\n        /**\n         * Get the media bitrates\n         * @method getBitrates\n         * @return {interfaces/Player~MediaBitrates|null} current bitrate and available bitrates\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @public\n         */\n        getBitrates() {\n            // getBitrates DASH disabled since it is not possible due to current device limitation\n            if (this.__protocol === DASH) {\n                warn('getBitrates is not supported for this type.');\n\n                return null;\n            }\n\n            let info = avplayProxy.getCurrentStreamInfo();\n\n            let bitrateInfo = {\n                currentBitrate: null,\n                availableBitrates: avplayProxy.getStreamingProperty('AVAILABLE_BITRATE')\n            };\n\n            let curInfo;\n\n            // 0: video, 1: audio, 2:subtitle\n            // On some tizen tv the string returned is incorrect and thus fail to parse\n            // XDK-3177, some video may return the unterminated string\n            // extract the number rather json parse the object\n            // e.g {Codec:unknown,Width:1280,Height:720,Fps:23,Bit_rate:2090075}\n            if (info.length && info[0].extra_info) {\n                try {\n                    // extract the Bit_rate string (Bit_rate:2090075)\n                    curInfo = info[0].extra_info.match(/[\"']?Bit_rate[\"']?:[\"']?[0-9]+[\"']?/g);\n                    if (curInfo.length > 0) {\n                        // extract the number\n                        curInfo = curInfo[0].replace(/['\"]?Bit_rate['\"]?:['\"]?([0-9]+)['\"]?/g, '$1');\n                        bitrateInfo.currentBitrate = parseInt(curInfo, 10);\n                    }\n                } catch (ex) {\n                    logError('Fail to get the current bitrate.');\n                }\n            }\n\n            return bitrateInfo;\n        },\n\n        /**\n         * Get the current playback time\n         * @method getCurrentTime\n         * @return {Number} the current playback time\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @public\n         */\n        getCurrentTime() {\n            return this.__currentTime;\n        },\n\n        /**\n         * to get the total time of the video\n         * @method getDuration\n         * @return {number} the total time of the video\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @public\n         */\n        getDuration() {\n            let duration = avplayProxy.getDuration();\n\n            if (duration !== avplayProxy.INVALID) {\n                return duration / 1000;\n            }\n\n            return 0;\n        },\n\n        /**\n         * set the id of the player\n         * @method getId\n         * @public\n         * @param {String} id the path of the player\n         * @memberof samsung-tizen/player/AVPlayer#\n         */\n        getId() {\n            return this.__id;\n        },\n\n        /**\n         * set the id of the player\n         * @method setId\n         * @param {String} id the path of the player\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @public\n         */\n        setId(id) {\n            this.__id = id;\n        },\n\n        // TODO\n        // show the subtitlesContainer div\n        showSubtitles() {\n            this.__showSubtitleContainer(true);\n            this.redrawSubtitles();\n        },\n\n        // TODO\n        // hide the subtitlesContainer div\n        hideSubtitles() {\n            this.__showSubtitleContainer(false);\n        },\n\n        // TODO\n        // set the contents of the subtitleText div to \"\" (empty)\n        clearSubtitles() {\n            this.updateSubtitles('');\n        },\n\n        // TODO\n        // set the contents of the subtitleText div\n        updateSubtitles(t) {\n            if (this.__subtitleText) {\n                this.__subtitleText.innerHTML = t;\n\n                if (this.__showingSubtitle) {\n                    this.redrawSubtitles();\n                }\n            }\n        },\n\n        // TODO\n        // ensures subtitleText element is displayed, or hidden if text is \"\"\n        redrawSubtitles() {\n            if (this.__subtitleText) {\n                this.__subtitleText.style.display = 'none';\n\n                if (this.__subtitleText.innerHTML.length > 0) {\n                    this.__subtitleText.style.display = 'inline';\n                }\n            }\n        },\n\n        /**\n         * get the extension Manager\n         * @method getExtensionManager\n         * @returns {media/extensionManager} the player extension manager\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @public\n         */\n        getExtensionManager() {\n            return this._extensionManager;\n        },\n\n        /**\n         * Indicate if the player is prepared and ready to load and play\n         * @method isPrepared\n         * @returns {Boolean} if player is prepared\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @public\n         */\n        isPrepared() {\n            return this.__prepared;\n        },\n\n        /**\n         * Suspend handler for the player\n         * @method doSuspend\n         * @returns {Promise} XDK Promise.\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @public\n         */\n        doSuspend() {\n            this.pause();\n            this.__hide();\n            if (this.__prepared) {\n                this.reset();\n            }\n\n            return promise.resolve();\n        },\n        /**\n         * Restore handler for the player\n         * @method doRestore\n         * @param {Object} suspendOption the saved option in suspended state\n         * @returns {Promise.<Boolean>} XDK Promise.\n         * @memberof samsung-tizen/player/AVPlayer#\n         * @public\n         */\n        doRestore({ url, option }) {\n            const asyncFunction = async () => {\n                const { __prepared, __loaded, __doLoadPromise } = this;\n\n                if (!__prepared) {\n                    this.prepare(option);\n                }\n\n                // Extension manager would have been created if the player\n                // is already in a loaded or loading state.\n                if (!__loaded && !__doLoadPromise) {\n                    const extensionManager = this.getExtensionManager();\n\n                    await extensionManager?.prepare(this, option);\n\n                    this.load(url, option);\n                }\n\n                this.__show();\n\n                return false;\n            };\n\n            return promise.toXDK(asyncFunction());\n        }\n    }\n);\n\nexport default AVPlayer;\n","/*******************************************************************************\n* @license\n* Copyright (c) 2016 - present Accedo. All Rights Reserved.\n* \n* This source code, its use, and distribution, is subject to the terms\n* and conditions of the applicable license agreement.\n* \n* Accedo Build XDK Device Package - Samsung Tizen (@accedo/xdk-device-samsung-tizen) 4.0.6\n* \n*******************************************************************************/\nimport _includesInstanceProperty from\"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _Array$isArray from\"@babel/runtime-corejs3/core-js-stable/array/is-array\";import _findInstanceProperty from\"@babel/runtime-corejs3/core-js-stable/instance/find\";import config from\"@accedo/xdk-config\";import logger from\"@accedo/xdk-log\";const{logError:logError,debug:debug}=logger({logTag:\"[samsung-tizen/avplayProxy]\"}),INVALID=\"__XDK:avplayProxy:invalid\",apiError=(e,r)=>(logError(`Error with API: webapis.avplay.${e}. ${r}`),INVALID),proxy=e=>(...r)=>{const{avplay:t=null}=webapis||{};if(!t)return apiError(e,\"webapis.avplay is not available.\");\"getState\"!==e&&isVerbose(e)&&debug(`${e}() @state: ${getState()}`);try{return t[e](...r)}catch(r){return apiError(e,r.message)}},AVPLAYER_ID=\"samsung-tizen/player/AVPlayer\",CONFIG_ITEM=\"log-blacklist\",BLACKLIST=(()=>{const{players:e=[]}=config.get(config.KEY.DEVICE_PACKAGES_INFO_KEY,{}),r=(_findInstanceProperty(e).call(e,(({id:e=\"\"})=>e===AVPLAYER_ID))||{})[CONFIG_ITEM];return _Array$isArray(r)?r:null})(),isVerbose=e=>!!_Array$isArray(BLACKLIST)&&_includesInstanceProperty(BLACKLIST).call(BLACKLIST,e),close=proxy(\"close\"),getCurrentStreamInfo=proxy(\"getCurrentStreamInfo\"),getCurrentTime=proxy(\"getCurrentTime\"),getDuration=proxy(\"getDuration\"),getState=proxy(\"getState\"),getStreamingProperty=proxy(\"getStreamingProperty\"),getTotalTrackInfo=proxy(\"getTotalTrackInfo\"),jumpBackward=proxy(\"jumpBackward\"),jumpForward=proxy(\"jumpForward\"),open=proxy(\"open\"),pause=proxy(\"pause\"),play=proxy(\"play\"),prepareAsync=proxy(\"prepareAsync\"),restore=proxy(\"restore\"),seekTo=proxy(\"seekTo\"),setDisplayRect=proxy(\"setDisplayRect\"),setDrm=proxy(\"setDrm\"),setListener=proxy(\"setListener\"),setSelectTrack=proxy(\"setSelectTrack\"),setExternalSubtitlePath=proxy(\"setExternalSubtitlePath\"),setSilentSubtitle=proxy(\"setSilentSubtitle\"),setSpeed=proxy(\"setSpeed\"),setStreamingProperty=proxy(\"setStreamingProperty\"),setTimeoutForBuffering=proxy(\"setTimeoutForBuffering\"),stop=proxy(\"stop\"),suspend=proxy(\"suspend\");export{INVALID,close,getCurrentStreamInfo,getCurrentTime,getDuration,getState,getStreamingProperty,getTotalTrackInfo,jumpBackward,jumpForward,open,pause,play,prepareAsync,restore,seekTo,setDisplayRect,setDrm,setListener,setSelectTrack,setExternalSubtitlePath,setSilentSubtitle,setSpeed,setStreamingProperty,setTimeoutForBuffering,stop,suspend};","/*******************************************************************************\n* @license\n* Copyright (c) 2016 - present Accedo. All Rights Reserved.\n* \n* This source code, its use, and distribution, is subject to the terms\n* and conditions of the applicable license agreement.\n* \n* Accedo Build XDK Log (@accedo/xdk-log) 4.0.4\n* \n*******************************************************************************/\nimport _bindInstanceProperty from\"@babel/runtime-corejs3/core-js-stable/instance/bind\";import config from\"@accedo/xdk-config\";const DEFAULT_LOG_TAG=\"[xdk-log]\",LOG_LEVELS={ALL:-1,DEBUG:0,INFO:1,LOG:2,WARN:3,ERROR:4},{DEBUG:DEBUG,INFO:INFO,LOG:LOG,WARN:WARN,ERROR:ERROR}=LOG_LEVELS,noop=()=>{},createLogger=({logTag:o=\"[xdk-log]\",transport:r})=>{var n,e,t,a,c;const{transport:l,level:g=2}=config.get(\"logging\",{}),L=r||l||console,p=g<=ERROR?_bindInstanceProperty(n=L.error).call(n,L,o):noop;return{error:p,logError:p,warn:g<=WARN?_bindInstanceProperty(e=L.warn).call(e,L,o):noop,log:g<=LOG?_bindInstanceProperty(t=L.log).call(t,L,o):noop,info:g<=INFO?_bindInstanceProperty(a=L.info).call(a,L,o):noop,debug:g<=DEBUG?_bindInstanceProperty(c=L.debug).call(c,L,o):noop}};export{LOG_LEVELS};export default createLogger;"],"names":["module","exports","sEnv","logger","logTag","logError","warn","info","debug","MediaExtensionConstants","DRM_EXTENSION","DRM","BUFFERING","SUBTITLE","PlayerConstants","DEFAULT_PARENT_NODE","PLAYER_EVENT","MediaConstants","AES_128","PLAYREADY","WIDEVINE","DASH","HLS","PROGRESSIVE","SMOOTH_STREAMING","resolution","getScreen","dimension","tizen","systeminfo","getCapability","system","xdk","screenSaverOn","AVPlayer","klass","EventDispatcher","IPlayer","SINGLE_PLAYER_ONLY","PRELOADABLE","__PLAYER_STATE","NONE","IDLE","READY","PLAYING","PAUSED","__id","__prepared","__preparing","__loaded","__connected","__connectionTimeLimit","__bufferingTimeLimit","__currentTime","__playbackSpeed","__withholdPlay","__withholdStop","__seekTime","__protocol","__mediaOption","__url","__drm","_extensionManager","__isPendingPlay","__secondToPlay","__doLoadPromise","__playerConfig","init","playerConfig","extensionManager","this","Environment","webapis","avplay","error","getPlayerConfig","getCapabilities","protocol","drm","prepare","option","parentNode","__parentNode","__playerObject","__createPlayerObject","appendChild","__subtitleContainer","_createSubtitleContainer","__subtitleText","_createSubtitleText","__showingSubtitle","__subtitlesTimer","addEventListener","SYSTEM","RESUME","__handleResume","SUSPEND","__handlePause","MediaExtensionManager","extensions","getVideoSize","width","videoWidth","height","videoHeight","avPlayerObject","document","createElement","setAttribute","e","__showSubtitleContainer","enable","_getPlayerObject","avplayProxy","util","then","reset","__hide","removeChild","clearTimeout","removeEventListener","deinit","__doLoad","mediaURL","__newDoLoadPromise","complete","promise","resolve","reject","operationResult","__isState","onbufferingstart","__onBufferingStart","onbufferingprogress","__onBufferingProgress","onbufferingcomplete","__onBufferingComplete","oncurrentplaytime","__onCurrentPlayTime","onstreamcompleted","__onFinished","onevent","__onEventCallback","onerror","__onError","ondrmevent","__onDRMCallback","onsubtitlechange","__onSubtitleCallback","__prepareDrm","Promise","includes","extMgr","isExtensionSupported","getExtension","extension","createDRMAgent","drmAgent","__getMediaUrlWithProtocolIfApplies","mediaUrlWithProtocol","load","stop","dispatchEvent","FORCE_PLAY","done","style","visibility","__show","START","percent","PROGRESS","__delayBufferingComplete","FINISH","__prepareSuccess","seekTime","seek","__stopScreenSaverAndPlay","__prepareFail","RENDER_FAILED","PlaybackErrorConstants","__stopPlayback","ERROR","screenSaverOff","currentTime","TIME_UPDATE","getCurrentTime","eventType","eventData","duration","text","SUBTITLE_UPDATE","updateSubtitles","setTimeout","clearSubtitles","drmEvent","drmData","FINISHED","GENERIC_UNKNOWN","stopResult","play","second","__maybeLoad","__doPlay","vow","log","isSpeeding","seekResult","__getState","toLowerCase","state","pause","__updateCurrentTime","resume","Math","min","getDuration","skip","skipResult","limit","current","speed","getPlaybackSpeed","setVideoSizeAndPosition","param","ratio","core","left","top","setFullscreen","window","innerHeight","innerWidth","getBitrates","curInfo","bitrateInfo","currentBitrate","availableBitrates","length","extra_info","match","replace","parseInt","ex","getId","setId","id","showSubtitles","redrawSubtitles","hideSubtitles","t","innerHTML","display","getExtensionManager","isPrepared","doSuspend","doRestore","url","asyncFunction","INVALID","apiError","r","proxy","isVerbose","getState","message","BLACKLIST","config","players","_findInstanceProperty","call","_Array$isArray","_includesInstanceProperty","close","getCurrentStreamInfo","getStreamingProperty","getTotalTrackInfo","jumpBackward","jumpForward","open","prepareAsync","restore","seekTo","setDisplayRect","setDrm","setListener","setSelectTrack","setExternalSubtitlePath","setSilentSubtitle","setSpeed","setStreamingProperty","setTimeoutForBuffering","suspend","DEBUG","INFO","LOG","WARN","noop","n","a","c","o","transport","l","level","g","L","console","p","_bindInstanceProperty"],"sourceRoot":""}