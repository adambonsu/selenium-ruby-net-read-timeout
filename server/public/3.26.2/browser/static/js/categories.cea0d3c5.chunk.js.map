{"version":3,"file":"static/js/categories.cea0d3c5.chunk.js","mappings":"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","sources":["components/TileGrid/PromoTileTypes.js","components/TileGrid/hooks/useGridRow.js","components/TileGrid/GridRow/GridRow.jsx","components/TileGrid/constants.js","components/TileGrid/hooks/useTileGrid.js","components/TileGrid/TileGrid.jsx","hooks/useDeepLinkBack/useDeepLinkBack.js","pages/Categories/hooks/useCategoriesPageFeeds.js","pages/Categories/CategoryEmpty/CategoryEmpty.jsx","pages/Categories/hooks/useBrandsByCategory.js","pages/Categories/CategoryContent/CategoryContent.jsx","pages/Categories/Categories.jsx"],"sourcesContent":["export const promoTileTypes = ['britboxPromoTile', 'hubplusEntertainmentPromoTile', 'hubplusFullSeriesPromoTile'];\n\nexport const episodeTileTypes = ['title', 'special', 'film'];\n","import { promoTileTypes, episodeTileTypes } from '../PromoTileTypes';\n\nconst useGridRow = ({ row, rowIndex, firstId, onBackTo }) =>\n    row.map((programme, tileIndex) => {\n        const { encodedEpisodeId, encodedProgrammeId, promoUrl, type } = programme;\n        const contentType = type || 'programme';\n        let link;\n        let tileId;\n\n        if (promoTileTypes.includes(type)) {\n            tileId = `${programme.type}-${rowIndex}-${tileIndex}`;\n            link = promoUrl;\n        } else if (episodeTileTypes.includes(type)) {\n            tileId = `episode-${rowIndex}-${encodedEpisodeId.letterA}`;\n            link = `/programmes/${encodedProgrammeId.underscore}/${encodedEpisodeId.letterA}`;\n        } else {\n            tileId = `programme-${rowIndex}-${encodedProgrammeId.letterA}`;\n            link = `/programmes/${encodedProgrammeId.underscore}`;\n        }\n\n        const backTo = rowIndex + tileIndex > 0 ? firstId : onBackTo;\n        return {\n            programme,\n            tileIndex,\n            link,\n            contentType,\n            tileId,\n            backTo\n        };\n    });\n\nexport default useGridRow;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FocusGroup from 'focus/FocusGroup';\nimport SliderTile from 'components/SliderTile';\nimport { useCptListClickTracking } from 'utils/tracking';\nimport { useParams } from 'react-router-dom';\nimport useGridRow from '../hooks/useGridRow';\nimport { gridColumns } from '../constants';\n\nconst GridRow = ({ id, row, rowIndex, firstId, onBackTo, writeToDOM }) => {\n    const { categoryName, collectionId } = useParams();\n    const { trackCptEvent } = useCptListClickTracking();\n\n    const handleClick = ({ programme, position }) => {\n        const listingIdType = categoryName ? 'categories' : 'collections';\n        const listingIdName = categoryName ?? collectionId;\n        const listingId = `${listingIdType}_programmes_grid_${listingIdName}`;\n\n        const listItem = {\n            listing_id: listingId,\n            position: rowIndex * gridColumns + position + 1,\n            programme_id: programme?.programmeId,\n            item_type: programme?.type || 'programme'\n        };\n        trackCptEvent(listItem);\n    };\n\n    const rowData = useGridRow({ row, rowIndex, firstId, onBackTo });\n    return (\n        <FocusGroup key={row[0].encodedEpisodeId} id={id} gridChild optimiseRenders className=\"TileGrid__row\" writeToDOM={writeToDOM}>\n            {writeToDOM &&\n                rowData.map(({ programme, tileIndex, link, tileId, backTo }, position) => (\n                    <SliderTile\n                        className=\"TileGrid__cell\"\n                        key={tileId}\n                        id={tileId}\n                        programme={{ ...programme, imageUrl: programme.image }}\n                        type={programme.tileType}\n                        href={link}\n                        backTo={backTo}\n                        onClick={() => handleClick({ programme, position })}\n                        position={tileIndex}\n                        throttle={{ horizontal: 0, vertical: 350 }}\n                    />\n                ))}\n        </FocusGroup>\n    );\n};\n\nGridRow.defaultProps = {\n    writeToDOM: true\n};\n\nGridRow.propTypes = {\n    id: PropTypes.string.isRequired,\n    row: PropTypes.arrayOf(\n        PropTypes.shape({\n            encodedEpisodeId: PropTypes.shape({\n                letterA: PropTypes.string,\n                underscore: PropTypes.string\n            })\n        })\n    ).isRequired,\n    onBackTo: PropTypes.func.isRequired,\n    rowIndex: PropTypes.number.isRequired,\n    firstId: PropTypes.string.isRequired,\n    writeToDOM: PropTypes.bool\n};\n\nexport default GridRow;\n","export const gridColumns = 4;\n","import { useMemo, useRef } from 'react';\nimport chunk from 'lodash/fp/chunk';\nimport useDeepLinkBack from 'hooks/useDeepLinkBack';\nimport GridRow from '../GridRow';\nimport { gridColumns } from '../constants';\n\nconst getTileType = (programme) => {\n    switch (programme.type) {\n        case 'episode':\n        case 'title':\n            return 'episode';\n        default:\n            return 'programme';\n    }\n};\n\nexport const generateTileId = (programme) => {\n    const idMap = {\n        episode: `episode-0-${programme.encodedEpisodeId.letterA}`,\n        programme: `programme-0-${programme.encodedProgrammeId.letterA}`\n    };\n    return idMap[getTileType(programme)];\n};\n\nconst useTileGrid = (programmes) => {\n    const pageContentRef = useRef();\n    const { handleBackTo } = useDeepLinkBack();\n    const rows = chunk(gridColumns)(programmes);\n    const firstId = programmes[0] && generateTileId(programmes[0]);\n\n    const gridData = useMemo(\n        () =>\n            [\n                ...(rows\n                    ? Object.values(rows).map((gridRow, rowIndex) => ({\n                          GridComponent: GridRow,\n                          props: {\n                              id: `gridRow${rowIndex + 1}`,\n                              rowIndex,\n                              row: gridRow,\n                              key: gridRow[0].encodedProgrammeId.letterA,\n                              firstId,\n                              rowType: 'slider',\n                              onBackTo: handleBackTo,\n                              height: 281\n                          }\n                      }))\n                    : [])\n            ].filter(Boolean),\n        [firstId, handleBackTo, rows]\n    );\n\n    return {\n        pageContentRef,\n        gridData\n    };\n};\n\nexport default useTileGrid;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FocusGroup from 'focus/FocusGroup';\nimport ScrollableGrid from 'components/ScrollableGrid';\nimport { IntersectionContextProvider } from '@itv/fe-components/IntersectionContext';\nimport { grid } from '@itv/fe-components/cjs/common/styles/grid.cls';\nimport cn from 'classnames';\nimport useTileGrid from './hooks/useTileGrid';\nimport './TileGrid.scss';\n\nconst TileGrid = ({ id, programmes, stealFocus, onClick, className }) => {\n    const { pageContentRef, gridData } = useTileGrid(programmes);\n\n    return (\n        <FocusGroup\n            grid\n            id={id}\n            className={cn(grid, className, 'TileGrid')}\n            orientation=\"column\"\n            backToMemory\n            stealFocus={stealFocus}\n            jumpToLastFocus\n            onClick={onClick}\n        >\n            <IntersectionContextProvider ref={pageContentRef}>\n                {gridData && <ScrollableGrid gridData={gridData} />}\n            </IntersectionContextProvider>\n        </FocusGroup>\n    );\n};\n\nTileGrid.propTypes = {\n    id: PropTypes.string,\n    programmes: PropTypes.arrayOf(\n        PropTypes.shape({\n            encodedEpisodeId: PropTypes.shape({\n                letterA: PropTypes.string,\n                underscore: PropTypes.string\n            })\n        })\n    ).isRequired,\n    stealFocus: PropTypes.bool,\n    onClick: PropTypes.func,\n    className: PropTypes.string\n};\n\nTileGrid.defaultProps = {\n    id: 'TileGrid',\n    stealFocus: false,\n    onClick: null,\n    className: ''\n};\n\nexport default TileGrid;\n","import { useHistory } from 'react-router-dom';\nimport useQuery from 'hooks/useQuery';\nimport { useModal } from 'contexts/ModalContext';\n\nfunction useDeepLinkBack() {\n    const query = useQuery();\n    const history = useHistory();\n    const { toggleExitDialog } = useModal();\n\n    const handleBackTo = () => {\n        if (query.get('fromDeepLink')) {\n            toggleExitDialog();\n        } else {\n            history.goBack();\n        }\n    };\n\n    return { handleBackTo };\n}\n\nexport default useDeepLinkBack;\n","import { feeds } from '@itv/fe-cerberus';\nimport useCerberus from '../../../hooks/useCerberus';\n\nconst useCategoriesPageFeeds = () => {\n    const {\n        result: categories,\n        loading: categoriesLoading,\n        networkError\n    } = useCerberus({\n        cerberusMethod: feeds.contentInventory.genres.getAllCategories\n    });\n\n    if (categoriesLoading) {\n        return { loading: true };\n    }\n\n    return {\n        categories,\n        loading: false,\n        networkError\n    };\n};\n\nexport default useCategoriesPageFeeds;\n","import React, { useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Button from 'components/Button/_BUTTON_DEPRECATED';\nimport Heading from '@itv/fe-components/Heading';\nimport './CategoryEmpty.scss';\nimport useFocusActions from 'focus/hooks/useFocusActions';\n\nexport const COPY = {\n    categoryEmpty: 'Sorry there are no programmes in this category right now',\n    backButton: 'Go back'\n};\n\nconst CategoryEmpty = () => {\n    const history = useHistory();\n    const { navigateBack } = useFocusActions();\n\n    const onClick = useCallback(() => {\n        // Required to trigger focus after history navigation\n        navigateBack();\n        history.goBack();\n    }, [history, navigateBack]);\n\n    return (\n        <div className=\"CategoryEmpty\">\n            <div className=\"CategoryEmpty__heading\">\n                <Heading element=\"h2\" className=\"CategoryEmpty__heading\">\n                    {COPY.categoryEmpty}\n                </Heading>\n            </div>\n            <Button id=\"categoryEmptyBackButton\" className=\"Link__button\" onClick={onClick}>\n                {COPY.backButton}\n            </Button>\n        </div>\n    );\n};\n\nexport default CategoryEmpty;\n","import useCerberus from 'hooks/useCerberus';\nimport { feeds } from '@itv/fe-cerberus';\n\nconst { getBrandsByCategory } = feeds.contentInventory.brands;\n\nconst useBrandsByCategory = (categoryId, limit, tiers) => {\n    const { result, loading, networkError } = useCerberus(\n        {\n            cerberusMethod: () => getBrandsByCategory({ category: categoryId, limit, tiers })\n        },\n        [categoryId]\n    );\n\n    if (loading) {\n        return { loading: true };\n    }\n\n    return { brands: result, loading: false, networkError };\n};\n\nexport default useBrandsByCategory;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport UserContext from '@itv/fe-components/UserContext';\nimport NetworkErrorModal from 'components/NetworkErrorModal';\nimport TileGrid from 'components/TileGrid';\nimport './CategoryContent.scss';\nimport cn from 'classnames';\nimport { gridWrapper } from '@itv/fe-components/cjs/common/styles/grid.cls';\nimport LoadingBar from 'components/LoadingBar';\nimport FocusGroup from 'focus/FocusGroup';\nimport CategoryEmpty from '../CategoryEmpty';\nimport useBrandsByCategory from '../hooks/useBrandsByCategory';\n\nconst CategoryContent = ({ categoryId, categoryName }) => {\n    const { getIsPremiumUser } = useContext(UserContext);\n    const tiers = getIsPremiumUser() ? ['FREE', 'PAID'] : ['FREE'];\n    const limit = null;\n    const { brands, loading, networkError } = useBrandsByCategory(categoryId, limit, tiers);\n\n    const addPropTileType = (item) => ({ ...item, tileType: 'grid-standard' });\n\n    if (loading) return <LoadingBar />;\n    if (!brands || !brands.length) return <CategoryEmpty />;\n    if (networkError) return <NetworkErrorModal />;\n\n    return (\n        <div id=\"CategoryContent\" className={cn('CategoryContent', gridWrapper)}>\n            <h1 className=\"CategoryContent__title\">{categoryName}</h1>\n            <FocusGroup id=\"FocusCategoryContent\" orientation=\"column\">\n                <TileGrid programmes={brands.map(addPropTileType)} />\n            </FocusGroup>\n        </div>\n    );\n};\n\nCategoryContent.propTypes = {\n    categoryId: PropTypes.string.isRequired,\n    categoryName: PropTypes.string.isRequired\n};\n\nCategoryContent.defaultProps = {};\n\nexport default CategoryContent;\n","import React, { useState, useMemo, useEffect } from 'react';\nimport { useParams, useLocation, useHistory } from 'react-router-dom';\nimport slugify from 'slugify';\nimport NetworkErrorModal from 'components/NetworkErrorModal';\nimport Page from 'components/Page';\nimport FocusGroup from 'focus/FocusGroup';\nimport LoadingBar from 'components/LoadingBar';\nimport { PageTypes } from 'utils/tracking';\nimport { paths } from 'routes/constants';\nimport PageNav from 'components/PageNav';\nimport useCategoriesPageFeeds from './hooks/useCategoriesPageFeeds';\nimport CategoryContent from './CategoryContent';\nimport './Categories.scss';\n\nconst slugifyOptions = { lower: true, remove: /and/ };\nconst doSlugify = (textToSlugify) => slugify(textToSlugify, slugifyOptions);\n\nconst Categories = () => {\n    const history = useHistory();\n    const { categoryName: slugParam } = useParams() || ''; // TODO try this without categoryName\n    const { categories, loading, networkError } = useCategoriesPageFeeds();\n    const { pathname } = useLocation();\n\n    const categoryRoutes = useMemo(() => {\n        if (categories) {\n            return categories.map(({ name, id }) => ({\n                id,\n                label: name,\n                slug: doSlugify(name),\n                href: `${paths.categories}/${doSlugify(name)}`\n            }));\n        }\n        return [];\n    }, [categories]);\n\n    const handleBackFromPageNav = () => {\n        history.goBack();\n    };\n\n    const [selectedCategory, setSelectedCategory] = useState();\n\n    useEffect(() => {\n        if (categoryRoutes?.length) {\n            setSelectedCategory(categoryRoutes.find((cat) => cat.slug === slugParam));\n        }\n    }, [slugParam, categoryRoutes]);\n\n    const uponSelectCategory = (getSelectedCategory) => history.push(getSelectedCategory().href);\n\n    if (loading) return <LoadingBar />;\n    if (!categories || networkError || !selectedCategory?.slug) return <NetworkErrorModal />;\n\n    return (\n        <Page\n            navTitle=\"Categories\"\n            id=\"categoriesPage\"\n            className=\"categoriesPage\"\n            trackingPageType={PageTypes.PROGRAMME_LIST}\n            trackingPageId={`category-${selectedCategory.slug}`}\n            trackingRoute={pathname}\n        >\n            <FocusGroup id=\"TabsGroupCatPage\" orientation=\"column\" stealFocus>\n                <PageNav\n                    pageList={categoryRoutes}\n                    selectedPageId={selectedCategory.id}\n                    setPage={uponSelectCategory}\n                    onBackTo={handleBackFromPageNav}\n                />\n                <CategoryContent categoryName={selectedCategory.label} categoryId={selectedCategory.id} />\n            </FocusGroup>\n        </Page>\n    );\n};\n\nexport default Categories;\n"],"names":["promoTileTypes","episodeTileTypes","row","rowIndex","firstId","onBackTo","map","programme","tileIndex","link","tileId","encodedEpisodeId","encodedProgrammeId","promoUrl","type","contentType","includes","letterA","underscore","backTo","GridRow","id","writeToDOM","useParams","categoryName","collectionId","trackCptEvent","useCptListClickTracking","rowData","useGridRow","FocusGroup","key","gridChild","optimiseRenders","className","position","SliderTile","imageUrl","image","tileType","href","onClick","listingIdName","listItem","listing_id","programme_id","programmeId","item_type","handleClick","throttle","horizontal","vertical","defaultProps","propTypes","PropTypes","isRequired","programmes","pageContentRef","useRef","handleBackTo","useDeepLinkBack","rows","chunk","episode","getTileType","gridData","useMemo","Object","values","gridRow","GridComponent","props","rowType","height","filter","Boolean","TileGrid","stealFocus","useTileGrid","grid","cn","orientation","backToMemory","jumpToLastFocus","IntersectionContext","ref","ScrollableGrid","query","useQuery","history","useHistory","toggleExitDialog","useModal","get","goBack","useCerberus","cerberusMethod","feeds","categories","result","categoriesLoading","loading","networkError","COPY","navigateBack","useFocusActions","useCallback","Heading","element","getBrandsByCategory","categoryId","limit","tiers","category","brands","CategoryContent","getIsPremiumUser","useContext","UserContext","useBrandsByCategory","LoadingBar","length","NetworkErrorModal","gridWrapper","item","slugifyOptions","lower","remove","doSlugify","textToSlugify","slugify","slugParam","useCategoriesPageFeeds","pathname","useLocation","categoryRoutes","name","label","slug","paths","useState","selectedCategory","setSelectedCategory","useEffect","find","cat","Page","navTitle","trackingPageType","PageTypes","trackingPageId","trackingRoute","PageNav","pageList","selectedPageId","setPage","getSelectedCategory","push"],"sourceRoot":""}