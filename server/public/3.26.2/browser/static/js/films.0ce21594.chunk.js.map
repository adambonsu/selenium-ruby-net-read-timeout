{"version":3,"file":"static/js/films.0ce21594.chunk.js","mappings":"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","sources":["components/TileGrid/PromoTileTypes.js","components/TileGrid/hooks/useGridRow.js","components/TileGrid/GridRow/GridRow.jsx","components/TileGrid/constants.js","components/TileGrid/hooks/useTileGrid.js","components/TileGrid/TileGrid.jsx","hooks/useDeepLinkBack/useDeepLinkBack.js","pages/Collections/Collection/CollectionContent/CollectionContent.jsx","pages/Films/hooks/useGetFilms.js","pages/Films/Films.jsx"],"sourcesContent":["export const promoTileTypes = ['britboxPromoTile', 'hubplusEntertainmentPromoTile', 'hubplusFullSeriesPromoTile'];\n\nexport const episodeTileTypes = ['title', 'special', 'film'];\n","import { promoTileTypes, episodeTileTypes } from '../PromoTileTypes';\n\nconst useGridRow = ({ row, rowIndex, firstId, onBackTo }) =>\n    row.map((programme, tileIndex) => {\n        const { encodedEpisodeId, encodedProgrammeId, promoUrl, type } = programme;\n        const contentType = type || 'programme';\n        let link;\n        let tileId;\n\n        if (promoTileTypes.includes(type)) {\n            tileId = `${programme.type}-${rowIndex}-${tileIndex}`;\n            link = promoUrl;\n        } else if (episodeTileTypes.includes(type)) {\n            tileId = `episode-${rowIndex}-${encodedEpisodeId.letterA}`;\n            link = `/programmes/${encodedProgrammeId.underscore}/${encodedEpisodeId.letterA}`;\n        } else {\n            tileId = `programme-${rowIndex}-${encodedProgrammeId.letterA}`;\n            link = `/programmes/${encodedProgrammeId.underscore}`;\n        }\n\n        const backTo = rowIndex + tileIndex > 0 ? firstId : onBackTo;\n        return {\n            programme,\n            tileIndex,\n            link,\n            contentType,\n            tileId,\n            backTo\n        };\n    });\n\nexport default useGridRow;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FocusGroup from 'focus/FocusGroup';\nimport SliderTile from 'components/SliderTile';\nimport { useCptListClickTracking } from 'utils/tracking';\nimport { useParams } from 'react-router-dom';\nimport useGridRow from '../hooks/useGridRow';\nimport { gridColumns } from '../constants';\n\nconst GridRow = ({ id, row, rowIndex, firstId, onBackTo, writeToDOM }) => {\n    const { categoryName, collectionId } = useParams();\n    const { trackCptEvent } = useCptListClickTracking();\n\n    const handleClick = ({ programme, position }) => {\n        const listingIdType = categoryName ? 'categories' : 'collections';\n        const listingIdName = categoryName ?? collectionId;\n        const listingId = `${listingIdType}_programmes_grid_${listingIdName}`;\n\n        const listItem = {\n            listing_id: listingId,\n            position: rowIndex * gridColumns + position + 1,\n            programme_id: programme?.programmeId,\n            item_type: programme?.type || 'programme'\n        };\n        trackCptEvent(listItem);\n    };\n\n    const rowData = useGridRow({ row, rowIndex, firstId, onBackTo });\n    return (\n        <FocusGroup key={row[0].encodedEpisodeId} id={id} gridChild optimiseRenders className=\"TileGrid__row\" writeToDOM={writeToDOM}>\n            {writeToDOM &&\n                rowData.map(({ programme, tileIndex, link, tileId, backTo }, position) => (\n                    <SliderTile\n                        className=\"TileGrid__cell\"\n                        key={tileId}\n                        id={tileId}\n                        programme={{ ...programme, imageUrl: programme.image }}\n                        type={programme.tileType}\n                        href={link}\n                        backTo={backTo}\n                        onClick={() => handleClick({ programme, position })}\n                        position={tileIndex}\n                        throttle={{ horizontal: 0, vertical: 350 }}\n                    />\n                ))}\n        </FocusGroup>\n    );\n};\n\nGridRow.defaultProps = {\n    writeToDOM: true\n};\n\nGridRow.propTypes = {\n    id: PropTypes.string.isRequired,\n    row: PropTypes.arrayOf(\n        PropTypes.shape({\n            encodedEpisodeId: PropTypes.shape({\n                letterA: PropTypes.string,\n                underscore: PropTypes.string\n            })\n        })\n    ).isRequired,\n    onBackTo: PropTypes.func.isRequired,\n    rowIndex: PropTypes.number.isRequired,\n    firstId: PropTypes.string.isRequired,\n    writeToDOM: PropTypes.bool\n};\n\nexport default GridRow;\n","export const gridColumns = 4;\n","import { useMemo, useRef } from 'react';\nimport chunk from 'lodash/fp/chunk';\nimport useDeepLinkBack from 'hooks/useDeepLinkBack';\nimport GridRow from '../GridRow';\nimport { gridColumns } from '../constants';\n\nconst getTileType = (programme) => {\n    switch (programme.type) {\n        case 'episode':\n        case 'title':\n            return 'episode';\n        default:\n            return 'programme';\n    }\n};\n\nexport const generateTileId = (programme) => {\n    const idMap = {\n        episode: `episode-0-${programme.encodedEpisodeId.letterA}`,\n        programme: `programme-0-${programme.encodedProgrammeId.letterA}`\n    };\n    return idMap[getTileType(programme)];\n};\n\nconst useTileGrid = (programmes) => {\n    const pageContentRef = useRef();\n    const { handleBackTo } = useDeepLinkBack();\n    const rows = chunk(gridColumns)(programmes);\n    const firstId = programmes[0] && generateTileId(programmes[0]);\n\n    const gridData = useMemo(\n        () =>\n            [\n                ...(rows\n                    ? Object.values(rows).map((gridRow, rowIndex) => ({\n                          GridComponent: GridRow,\n                          props: {\n                              id: `gridRow${rowIndex + 1}`,\n                              rowIndex,\n                              row: gridRow,\n                              key: gridRow[0].encodedProgrammeId.letterA,\n                              firstId,\n                              rowType: 'slider',\n                              onBackTo: handleBackTo,\n                              height: 281\n                          }\n                      }))\n                    : [])\n            ].filter(Boolean),\n        [firstId, handleBackTo, rows]\n    );\n\n    return {\n        pageContentRef,\n        gridData\n    };\n};\n\nexport default useTileGrid;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FocusGroup from 'focus/FocusGroup';\nimport ScrollableGrid from 'components/ScrollableGrid';\nimport { IntersectionContextProvider } from '@itv/fe-components/IntersectionContext';\nimport { grid } from '@itv/fe-components/cjs/common/styles/grid.cls';\nimport cn from 'classnames';\nimport useTileGrid from './hooks/useTileGrid';\nimport './TileGrid.scss';\n\nconst TileGrid = ({ id, programmes, stealFocus, onClick, className }) => {\n    const { pageContentRef, gridData } = useTileGrid(programmes);\n\n    return (\n        <FocusGroup\n            grid\n            id={id}\n            className={cn(grid, className, 'TileGrid')}\n            orientation=\"column\"\n            backToMemory\n            stealFocus={stealFocus}\n            jumpToLastFocus\n            onClick={onClick}\n        >\n            <IntersectionContextProvider ref={pageContentRef}>\n                {gridData && <ScrollableGrid gridData={gridData} />}\n            </IntersectionContextProvider>\n        </FocusGroup>\n    );\n};\n\nTileGrid.propTypes = {\n    id: PropTypes.string,\n    programmes: PropTypes.arrayOf(\n        PropTypes.shape({\n            encodedEpisodeId: PropTypes.shape({\n                letterA: PropTypes.string,\n                underscore: PropTypes.string\n            })\n        })\n    ).isRequired,\n    stealFocus: PropTypes.bool,\n    onClick: PropTypes.func,\n    className: PropTypes.string\n};\n\nTileGrid.defaultProps = {\n    id: 'TileGrid',\n    stealFocus: false,\n    onClick: null,\n    className: ''\n};\n\nexport default TileGrid;\n","import { useHistory } from 'react-router-dom';\nimport useQuery from 'hooks/useQuery';\nimport { useModal } from 'contexts/ModalContext';\n\nfunction useDeepLinkBack() {\n    const query = useQuery();\n    const history = useHistory();\n    const { toggleExitDialog } = useModal();\n\n    const handleBackTo = () => {\n        if (query.get('fromDeepLink')) {\n            toggleExitDialog();\n        } else {\n            history.goBack();\n        }\n    };\n\n    return { handleBackTo };\n}\n\nexport default useDeepLinkBack;\n","import React, { useEffect } from 'react';\nimport TileGrid from 'components/TileGrid';\nimport './CollectionContent.scss';\nimport Heading from '@itv/fe-components/Heading';\nimport { usePreviewState, usePreviewUpdater } from 'contexts/PreviewContext';\nimport cn from 'classnames';\nimport { gridWrapper } from '@itv/fe-components/cjs/common/styles/grid.cls';\nimport { ContentInventoryCollectionPropType } from '../../../../helpers/propTypes';\n\nconst getHeading = (headingTitle, shows = []) => {\n    const { length: showsLength } = shows;\n    const totalShows = `${showsLength} ${showsLength > 1 ? 'items' : 'item'} available`;\n    return `${headingTitle} - ${totalShows}`;\n};\n\nconst CollectionContent = ({ collection }) => {\n    const preview = usePreviewState();\n    const setPreview = usePreviewUpdater();\n\n    const { headingTitle, shows } = collection;\n    const { programme } = preview;\n\n    useEffect(() => {\n        if (shows.length > 0 && !programme) {\n            setPreview({\n                programme: shows[0],\n                contentType: 'common'\n            });\n        }\n    }, [programme, setPreview, shows]);\n\n    // All items on Collections view should use grid-standard tile type.\n    const gridStandardShows = shows.map((show) => ({\n        ...show,\n        tileType: 'grid-standard'\n    }));\n    return (\n        <div className={cn('CollectionContent', gridWrapper)}>\n            <Heading element=\"h4\" className=\"CollectionContent__title\">\n                {getHeading(headingTitle, shows)}\n            </Heading>\n            <TileGrid programmes={gridStandardShows} stealFocus className=\"CollectionContent__tileGrid\" />\n            <div className=\"CollectionContent__gradient\" />\n        </div>\n    );\n};\n\nCollectionContent.propTypes = {\n    collection: ContentInventoryCollectionPropType.isRequired\n};\n\nexport default CollectionContent;\n","import { useContext } from 'react';\nimport useCerberus from 'hooks/useCerberus';\nimport { utils, feeds } from '@itv/fe-cerberus';\nimport UserContext from '@itv/fe-components/UserContext';\n\nconst { getCollection } = feeds.contentInventory.collections;\n\nconst useGetFilms = (collectionName) => {\n    const { getIsPremiumUser } = useContext(UserContext);\n\n    const collectionId = utils.contentInventoryUtils.getCollectionId(collectionName);\n    const { result, loading, networkError } = useCerberus({\n        cerberusMethod: () => getCollection({ collectionId, isPremiumUser: getIsPremiumUser() })\n    });\n\n    if (loading) {\n        return { loading: true };\n    }\n\n    return { collection: result, loading: false, networkError };\n};\n\nexport default useGetFilms;\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { PageIds, PageTypes } from 'utils/tracking';\nimport Page from 'components/Page';\nimport LoadingBar from 'components/LoadingBar';\nimport NetworkErrorModal from 'components/NetworkErrorModal';\nimport { PreviewProvider } from 'contexts/PreviewContext/PreviewContext';\nimport CollectionContent from '../Collections/Collection/CollectionContent';\nimport useGetFilms from './hooks/useGetFilms';\n\nconst Films = () => {\n    const trackingPageId = `${PageIds.FILMS}`;\n    const { pathname } = useLocation();\n    const collectionName = pathname.substring(1);\n    const { collection, loading, networkError } = useGetFilms(collectionName);\n\n    if (loading) return <LoadingBar />;\n    if (networkError || !collection) return <NetworkErrorModal />;\n\n    return (\n        <Page id=\"films\" trackingPageType={PageTypes.PROGRAMME_LIST} trackingPageId={trackingPageId} trackingRoute={collectionName}>\n            <PreviewProvider>\n                <CollectionContent collection={collection} />\n            </PreviewProvider>\n        </Page>\n    );\n};\n\nexport default Films;\n"],"names":["promoTileTypes","episodeTileTypes","row","rowIndex","firstId","onBackTo","map","programme","tileIndex","link","tileId","encodedEpisodeId","encodedProgrammeId","promoUrl","type","contentType","includes","letterA","underscore","backTo","GridRow","id","writeToDOM","useParams","categoryName","collectionId","trackCptEvent","useCptListClickTracking","rowData","useGridRow","FocusGroup","key","gridChild","optimiseRenders","className","position","SliderTile","imageUrl","image","tileType","href","onClick","listingIdName","listItem","listing_id","programme_id","programmeId","item_type","handleClick","throttle","horizontal","vertical","defaultProps","propTypes","PropTypes","isRequired","programmes","pageContentRef","useRef","handleBackTo","useDeepLinkBack","rows","chunk","episode","getTileType","gridData","useMemo","Object","values","gridRow","GridComponent","props","rowType","height","filter","Boolean","TileGrid","stealFocus","useTileGrid","grid","cn","orientation","backToMemory","jumpToLastFocus","IntersectionContext","ref","ScrollableGrid","query","useQuery","history","useHistory","toggleExitDialog","useModal","get","goBack","CollectionContent","collection","preview","usePreviewState","setPreview","usePreviewUpdater","headingTitle","shows","useEffect","length","gridStandardShows","show","gridWrapper","Heading","element","showsLength","totalShows","getHeading","ContentInventoryCollectionPropType","getCollection","feeds","collectionName","getIsPremiumUser","useContext","UserContext","utils","useCerberus","cerberusMethod","isPremiumUser","result","loading","networkError","trackingPageId","PageIds","useLocation","pathname","substring","useGetFilms","LoadingBar","NetworkErrorModal","Page","trackingPageType","PageTypes","trackingRoute"],"sourceRoot":""}