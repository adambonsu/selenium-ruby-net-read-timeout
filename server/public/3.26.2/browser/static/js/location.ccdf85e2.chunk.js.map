{"version":3,"file":"static/js/location.ccdf85e2.chunk.js","mappings":"kSAMaA,GADkBC,OAAO,mBACRA,OAAO,mBACxBC,EAA2BD,OAAO,4BAClCE,EAAuBF,OAAO,wBAC9BG,EAAkBH,OAAO,mBACzBI,EAAwBJ,OAAO,yB,qDCDtCK,EAAkB,SAAH,GAAsB,IAAhBC,EAAQ,EAARA,SACjBC,EAAUD,EAAWE,EAAAA,QAAgBC,EAAAA,QACrCC,EAAUJ,EACZ,iEACkC,wBAAMK,UAAU,kBAAkBL,IAGpE,+DAGJ,OACI,uBAAKK,UAAU,gCACX,gBAACC,EAAA,GAAI,CAACC,IAAKN,EAASI,UAAU,mCAC9B,wBAAMA,UAAU,8BAA8BD,GAG1D,EAEAL,EAAgBS,aAAe,CAC3BR,SAAU,IAGdD,EAAgBU,UAAY,CACxBT,SAAUU,IAAAA,QAGd,Q,sBC3BMC,EAAqB,SAAH,OAAMC,EAAkB,EAAlBA,mBAAoBC,EAAsB,EAAtBA,uBAAwBb,EAAQ,EAARA,SAAQ,OAC9E,gBAACc,EAAA,QAAU,CAACC,GAAG,kBAAkBV,UAAU,8BACvC,gBAACW,EAAA,QAAM,CAACX,UAAU,mBAAmBY,QAASL,EAAoBM,OAAO,iBAAe,mBAGvFlB,GACG,gBAACgB,EAAA,QAAM,CAACX,UAAU,mBAAmBY,QAASJ,EAAwBK,OAAO,iBAAe,qBAIvF,EAGjBP,EAAmBF,UAAY,CAC3BG,mBAAoBF,IAAAA,KAAAA,WACpBG,uBAAwBH,IAAAA,KAAAA,WACxBV,SAAUU,IAAAA,OAAAA,YAGd,I,EAAA,I,ksBCvBO,IAODS,GAAa,OACd1B,GAAiB,YAAgB,IAAb2B,EAAK,EAALA,MAEjB,OADAC,EAAAA,EAAAA,IAAkBC,EAAAA,GAAAA,aACX,EAAP,KACOF,GAAK,IACRpB,SAAU,GACVuB,2BAA2B,GAEnC,IAAC,IACA5B,GAA2B,gBAAGyB,EAAK,EAALA,MAAK,cAC7BA,GAAK,IACRG,2BAA4BH,EAAMG,2BAAyB,IAC7D,IACD3B,GAAuB,gBAAGwB,EAAK,EAALA,MAAK,cACzBA,GAAK,IACRI,cAAeJ,EAAMI,cAAY,IACnC,IACD3B,GAAkB,YAA0C,IAAvCuB,EAAK,EAALA,MAAkBK,EAAW,EAAtBC,QAAWD,YAEpC,OADAE,EAAAA,EAAAA,IAAgB,CAAEC,IAAKN,EAAAA,GAAAA,YAAkBO,MAAOJ,IACzCL,EAAMpB,WAAayB,EAAW,OAExBL,GAAK,IACRpB,SAAUyB,EACVD,cAAc,IAAK,OAGhBJ,GAAK,IACRI,cAAc,GAE5B,IAAC,IACA1B,GAAwB,gBAAGsB,EAAK,EAALA,MAAK,cAC1BA,GAAK,IACRU,uBAAwBV,EAAMU,uBAAqB,IACrD,GAMN,EAHgB,SAACV,EAAM,GAAD,IAAUW,EAAU,EAAhBC,KAAkBN,EAAO,EAAPA,QAAO,OAC/CK,KAAcZ,EAAgBA,EAAcY,GAAY,CAAEX,MAAAA,EAAOM,QAAAA,IAAaN,CAAM,ECtCxF,EAR0B,SAAH,OAAMa,EAAQ,EAARA,SAAQ,MAAQ,CACzCC,cAAe,kBAAMD,EAAS,CAAED,KAAMvC,GAAiB,EACvDoB,uBAAwB,kBAAMoB,EAAS,CAAED,KAAMrC,GAA2B,EAC1EiB,mBAAoB,kBAAMqB,EAAS,CAAED,KAAMpC,GAAuB,EAClEuC,eAAgB,gBAAGT,EAAO,EAAPA,QAAO,OAAOO,EAAS,CAAED,KAAMnC,EAAiB6B,QAAAA,GAAU,EAC7EU,oBAAqB,kBAAMH,EAAS,CAAED,KAAMlC,GAAwB,EACvE,E,iCCAKuC,EAAqB,SAAH,GAAmD,IAA7CH,EAAa,EAAbA,cAAerB,EAAsB,EAAtBA,uBACjCyB,GAAwBC,EAAAA,EAAAA,MAAxBD,oBAEFE,GAAYC,EAAAA,EAAAA,cAAY,WAC1BP,IACAI,GAAoB,EACxB,GAAG,CAACJ,EAAeI,IAEbI,GAAWD,EAAAA,EAAAA,cAAY,WACzB5B,IACAyB,GAAoB,EACxB,GAAG,CAACA,EAAqBzB,IAEzB,OACI,gBAAC8B,EAAA,GAAY,KACT,gBAACC,EAAA,GAAO,CAACC,QAAQ,MAAI,iDACrB,gBAAC,KAAc,KACX,gBAAC7B,EAAA,QAAM,CAACC,QAASuB,EAAWtB,OAAQwB,GAAS,0BAG7C,gBAAC1B,EAAA,QAAM,CAACC,QAASyB,EAAUxB,OAAQwB,GAAS,WAM5D,EAEAL,EAAmB5B,UAAY,CAC3BI,uBAAwBH,IAAAA,KAAAA,WACxBwB,cAAexB,IAAAA,KAAAA,YAGnB,Q,0kCCrBA,IAyDA,EAzDiB,WAAO,IAAD,EAC6C,KAAtCoC,EAAAA,EAAAA,YAAWC,EHjBH,CAClC/C,UAAUgD,EAAAA,EAAAA,IAAgB1B,EAAAA,GAAAA,cAAqB,GAC/CC,2BAA2B,EAC3BC,cAAc,EACdM,uBAAuB,IGayC,GAAzDV,EAAK,KAAEa,EAAQ,KACdgB,GAAsBC,EAAAA,EAAAA,kBAAtBD,kBAEKE,GACTC,EAAAA,EAAAA,uBADAhC,MAAS+B,kBAEb,GAAsFE,EAAAA,EAAAA,UAClF,kBAAMC,EAAkB,CAAErB,SAAAA,GAAW,GACrC,IAFIrB,EAAkB,EAAlBA,mBAAoBC,EAAsB,EAAtBA,uBAAwBsB,EAAc,EAAdA,eAAgBD,EAAa,EAAbA,cAI5DX,EAAsDH,EAAtDG,0BAA2BC,EAA2BJ,EAA3BI,aAAcxB,EAAaoB,EAAbpB,UAEjDuD,EAAAA,EAAAA,YAAU,WACFJ,IACI3B,GAAcZ,IACdW,GAA2BV,IAEvC,GAAG,CAACW,EAAc2B,EAAmBvC,EAAoBC,EAAwBU,KAEjFgC,EAAAA,EAAAA,YAAU,WACNN,EAAkB7B,EAAMpB,UAAYwD,EAAAA,GACxC,GAAG,CAACpC,EAAMpB,SAAUiD,IAEpB,IAAMQ,EAAqBjC,EAAekC,EAAAA,EAAWC,EAAAA,EAErD,OACI,gBAACF,EAAkB,CAAC1C,GAAG,eAAe6C,iBAAkBC,EAAAA,GAAAA,QAAmBC,eAAgBC,EAAAA,GAAAA,SAAkBC,cAAY,GACrH,uBAAK3D,UAAW4D,IAAG,YAAU,SAAKC,EAAAA,MAAQ1C,GAAY,IAAG2C,EAAAA,YAAc3C,GAAY,KAC/E,uBAAKnB,UAAW4D,IAAGG,EAAAA,SAAUC,EAAAA,oBAAoB,KAAIC,EAAAA,oBAAsB9C,KACtEA,EACG,gBAAC+C,EAAA,EAAY,CACTpC,eAAgBA,EAChBjB,OAAQN,EACR4D,OAAQ5D,EACR6D,YAAY,WAGhB,gCACI,gBAACC,EAAAC,WAAU,CAACC,MAAM,WAAWC,eAAa,IAC1C,gBAAC,EAAe,CAAC7E,SAAUA,IAC3B,qBAAGK,UAAU,wBN5DV,iQM6DH,gBAAC,EAAkB,CACfL,SAAUA,EACVY,mBAAoBA,EACpBC,uBAAwBA,OAM3CU,GACG,gBAAC,EAAkB,CAACW,cAAeA,EAAerB,uBAAwBA,IAI1F,C","sources":["pages/Settings/Location/constants.js","pages/Settings/Location/LocationDetails/LocationDetails.jsx","pages/Settings/Location/LocationFocusGroup/LocationFocusGroup.jsx","pages/Settings/Location/state/reducer.js","pages/Settings/Location/state/actions.js","pages/Settings/Location/modals/ClearLocationModal/ClearLocationModal.jsx","pages/Settings/Location/Location.jsx"],"sourcesContent":["export const locationDisclaimer = `Your postcode helps us show you the right programmes for your region. Please note\nthat we do not use your details for any marketing purposes. Some ITV shows are not available through\nITVX to viewers in Northern Ireland and to most viewers in Scotland.`;\n\n// Action types\nexport const TOGGLE_KEYBOARD = Symbol('TOGGLE_KEYBOARD');\nexport const CLEAR_LOCATION = Symbol('CLEAR_LOCATION');\nexport const TOGGLE_SHOW_CONFIRMATION = Symbol('TOGGLE_SHOW_CONFIRMATION');\nexport const TOGGLE_SHOW_KEYBOARD = Symbol('TOGGLE_SHOW_KEYBOARD');\nexport const UPDATE_LOCATION = Symbol('UPDATE_LOCATION');\nexport const TOGGLE_NOT_RECOGNISED = Symbol('TOGGLE_NOT_RECOGNISED');\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Icon from '@itv/fe-components/Icon';\nimport locationGreen from '@itv/fe-components/icons/locationGreen';\nimport locationRed from '@itv/fe-components/icons/locationRed';\n\nimport '../Location.scss';\n\nconst LocationDetails = ({ location }) => {\n    const iconSrc = location ? locationGreen : locationRed;\n    const message = location ? (\n        <>\n            You have set your location to <span className=\"Location__area\">{location}</span>\n        </>\n    ) : (\n        <>You have not set a location</>\n    );\n\n    return (\n        <div className=\"Location__details--container\">\n            <Icon src={iconSrc} className=\"Location__cp_icon--custom-size\" />\n            <span className=\"Location__details--message\">{message}</span>\n        </div>\n    );\n};\n\nLocationDetails.defaultProps = {\n    location: ''\n};\n\nLocationDetails.propTypes = {\n    location: PropTypes.string\n};\n\nexport default LocationDetails;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport '../Location.scss';\n\nimport FocusGroup from 'focus/FocusGroup';\nimport Button from 'components/Button';\n\nconst LocationFocusGroup = ({ toggleShowKeyboard, toggleShowConfirmation, location }) => (\n    <FocusGroup id=\"locationActions\" className=\"Location__button-container\">\n        <Button className=\"Location__button\" onClick={toggleShowKeyboard} backTo=\"location-link\">\n            Update Location\n        </Button>\n        {location && (\n            <Button className=\"Location__button\" onClick={toggleShowConfirmation} backTo=\"location-link\">\n                Clear my Location\n            </Button>\n        )}\n    </FocusGroup>\n);\n\nLocationFocusGroup.propTypes = {\n    toggleShowKeyboard: PropTypes.func.isRequired,\n    toggleShowConfirmation: PropTypes.func.isRequired,\n    location: PropTypes.string.isRequired\n};\n\nexport default LocationFocusGroup;\n","import { getStorageValue, setStorageValue, removeStorageItem, Keys } from 'utils/storage';\n\nimport { CLEAR_LOCATION, TOGGLE_SHOW_CONFIRMATION, TOGGLE_SHOW_KEYBOARD, UPDATE_LOCATION, TOGGLE_NOT_RECOGNISED } from '../constants';\n\nexport const getInitialState = () => ({\n    location: getStorageValue(Keys.BROADCASTER) || '',\n    clearLocationConfirmation: false,\n    showKeyboard: false,\n    postcodeNotRecognised: false\n});\n\nconst reduceCaseMap = {\n    [CLEAR_LOCATION]: ({ state }) => {\n        removeStorageItem(Keys.BROADCASTER);\n        return {\n            ...state,\n            location: '',\n            clearLocationConfirmation: false\n        };\n    },\n    [TOGGLE_SHOW_CONFIRMATION]: ({ state }) => ({\n        ...state,\n        clearLocationConfirmation: !state.clearLocationConfirmation\n    }),\n    [TOGGLE_SHOW_KEYBOARD]: ({ state }) => ({\n        ...state,\n        showKeyboard: !state.showKeyboard\n    }),\n    [UPDATE_LOCATION]: ({ state, payload: { newLocation } }) => {\n        setStorageValue({ key: Keys.BROADCASTER, value: newLocation });\n        return state.location !== newLocation\n            ? {\n                  ...state,\n                  location: newLocation,\n                  showKeyboard: false\n              }\n            : {\n                  ...state,\n                  showKeyboard: false\n              };\n    },\n    [TOGGLE_NOT_RECOGNISED]: ({ state }) => ({\n        ...state,\n        postcodeNotRecognised: !state.postcodeNotRecognised\n    })\n};\n\nconst reducer = (state, { type: actionType, payload }) =>\n    actionType in reduceCaseMap ? reduceCaseMap[actionType]({ state, payload }) : state;\n\nexport default reducer;\n","import { CLEAR_LOCATION, TOGGLE_SHOW_CONFIRMATION, TOGGLE_SHOW_KEYBOARD, UPDATE_LOCATION, TOGGLE_NOT_RECOGNISED } from '../constants';\n\nconst initialiseActions = ({ dispatch }) => ({\n    clearLocation: () => dispatch({ type: CLEAR_LOCATION }),\n    toggleShowConfirmation: () => dispatch({ type: TOGGLE_SHOW_CONFIRMATION }),\n    toggleShowKeyboard: () => dispatch({ type: TOGGLE_SHOW_KEYBOARD }),\n    updateLocation: ({ payload }) => dispatch({ type: UPDATE_LOCATION, payload }),\n    toggleNotRecognised: () => dispatch({ type: TOGGLE_NOT_RECOGNISED })\n});\n\nexport default initialiseActions;\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nimport OverlayModal, { OverlayButtons } from 'components/OverlayModal';\nimport Button from 'components/Button';\nimport { useNavActions } from 'contexts/NavContext';\nimport Heading from '@itv/fe-components/Heading';\n\nconst ClearLocationModal = ({ clearLocation, toggleShowConfirmation }) => {\n    const { setSubNavStealFocus } = useNavActions();\n\n    const onConfirm = useCallback(() => {\n        clearLocation();\n        setSubNavStealFocus(true);\n    }, [clearLocation, setSubNavStealFocus]);\n\n    const onCancel = useCallback(() => {\n        toggleShowConfirmation();\n        setSubNavStealFocus(true);\n    }, [setSubNavStealFocus, toggleShowConfirmation]);\n\n    return (\n        <OverlayModal>\n            <Heading element=\"h2\">Are you sure you want to clear your location?</Heading>\n            <OverlayButtons>\n                <Button onClick={onConfirm} backTo={onCancel}>\n                    Yes, Clear my Location\n                </Button>\n                <Button onClick={onCancel} backTo={onCancel}>\n                    Cancel\n                </Button>\n            </OverlayButtons>\n        </OverlayModal>\n    );\n};\n\nClearLocationModal.propTypes = {\n    toggleShowConfirmation: PropTypes.func.isRequired,\n    clearLocation: PropTypes.func.isRequired\n};\n\nexport default ClearLocationModal;\n","import React, { useReducer, useEffect, useMemo } from 'react';\nimport cn from 'classnames';\nimport { PageHeader } from 'components/Page';\nimport Takeover from 'components/Takeover';\nimport { grid, gridColumn, gridItem, gridItemAlignCenter, widthSevenTwelfths } from '@itv/fe-components/cjs/common/styles/grid.cls';\nimport { useBroadcaster } from 'contexts/BroadcasterContext';\nimport { UNKNOWN_BROADCASTER } from 'utils/storage';\nimport { PageTypes, PageIds } from 'utils/tracking';\nimport LocationForm from 'components/LocationForm';\nimport { useAppEventsContext } from 'contexts/AppEventsContext';\nimport { locationDisclaimer } from './constants';\nimport LocationDetails from './LocationDetails/LocationDetails';\nimport LocationFocusGroup from './LocationFocusGroup';\nimport SettingsPage from '../SettingsPage';\nimport reducer, { getInitialState } from './state/reducer';\nimport initialiseActions from './state/actions';\nimport ClearLocationModal from './modals/ClearLocationModal';\n\nimport './Location.scss';\n\nconst Location = () => {\n    const [state, dispatch] = useReducer(reducer, getInitialState());\n    const { updateBroadcaster } = useBroadcaster();\n    const {\n        state: { closePlayerChecks }\n    } = useAppEventsContext();\n    const { toggleShowKeyboard, toggleShowConfirmation, updateLocation, clearLocation } = useMemo(\n        () => initialiseActions({ dispatch }),\n        []\n    );\n    const { clearLocationConfirmation, showKeyboard, location } = state;\n\n    useEffect(() => {\n        if (closePlayerChecks) {\n            if (showKeyboard) toggleShowKeyboard();\n            if (clearLocationConfirmation) toggleShowConfirmation();\n        }\n    }, [showKeyboard, closePlayerChecks, toggleShowKeyboard, toggleShowConfirmation, clearLocationConfirmation]);\n\n    useEffect(() => {\n        updateBroadcaster(state.location || UNKNOWN_BROADCASTER);\n    }, [state.location, updateBroadcaster]);\n\n    const ConditionalWrapper = showKeyboard ? Takeover : SettingsPage;\n\n    return (\n        <ConditionalWrapper id=\"locationPage\" trackingPageType={PageTypes.ACCOUNT} trackingPageId={PageIds.LOCATION} isFullscreen>\n            <div className={cn('Location', { [grid]: !showKeyboard, [gridColumn]: !showKeyboard })}>\n                <div className={cn(gridItem, gridItemAlignCenter, { [widthSevenTwelfths]: !showKeyboard })}>\n                    {showKeyboard ? (\n                        <LocationForm\n                            updateLocation={updateLocation}\n                            backTo={toggleShowKeyboard}\n                            onHide={toggleShowKeyboard}\n                            onHideLabel=\"Cancel\"\n                        />\n                    ) : (\n                        <>\n                            <PageHeader title=\"Location\" isLargerTitle />\n                            <LocationDetails location={location} />\n                            <p className=\"Location__disclaimer\">{locationDisclaimer}</p>\n                            <LocationFocusGroup\n                                location={location}\n                                toggleShowKeyboard={toggleShowKeyboard}\n                                toggleShowConfirmation={toggleShowConfirmation}\n                            />\n                        </>\n                    )}\n                </div>\n            </div>\n            {clearLocationConfirmation && (\n                <ClearLocationModal clearLocation={clearLocation} toggleShowConfirmation={toggleShowConfirmation} />\n            )}\n        </ConditionalWrapper>\n    );\n};\n\nexport default Location;\n"],"names":["CLEAR_LOCATION","Symbol","TOGGLE_SHOW_CONFIRMATION","TOGGLE_SHOW_KEYBOARD","UPDATE_LOCATION","TOGGLE_NOT_RECOGNISED","LocationDetails","location","iconSrc","locationGreen","locationRed","message","className","Icon","src","defaultProps","propTypes","PropTypes","LocationFocusGroup","toggleShowKeyboard","toggleShowConfirmation","FocusGroup","id","Button","onClick","backTo","reduceCaseMap","state","removeStorageItem","Keys","clearLocationConfirmation","showKeyboard","newLocation","payload","setStorageValue","key","value","postcodeNotRecognised","actionType","type","dispatch","clearLocation","updateLocation","toggleNotRecognised","ClearLocationModal","setSubNavStealFocus","useNavActions","onConfirm","useCallback","onCancel","OverlayModal","Heading","element","useReducer","reducer","getStorageValue","updateBroadcaster","useBroadcaster","closePlayerChecks","useAppEventsContext","useMemo","initialiseActions","useEffect","UNKNOWN_BROADCASTER","ConditionalWrapper","Takeover","SettingsPage","trackingPageType","PageTypes","trackingPageId","PageIds","isFullscreen","cn","grid","gridColumn","gridItem","gridItemAlignCenter","widthSevenTwelfths","LocationForm","onHide","onHideLabel","Page","PageHeader","title","isLargerTitle"],"sourceRoot":""}