{"version":3,"file":"static/js/profiles.16e5afe5.chunk.js","mappings":"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","sources":["contexts/ProfilesContext/hooks/useCreateProfile/useCreateProfile.js","pages/Profiles/components/profilesScreen/hooks/useProfilesScreen.js","pages/Profiles/components/profilesScreen/ProfilesScreen.jsx","pages/Profiles/Profiles.jsx","pages/Settings/About/ResetAppModal/removeLocalStorageKeys.js","pages/Settings/About/ResetAppModal/ResetAppModal.jsx","pages/Settings/About/About.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { user } from '@itv/fe-cerberus';\n\n// TODO this schema is in many places, maybe It's good to create more flexible hooks for this, update, delete profile because they are similar\nconst useCreateProfile = () => {\n    const [error, setError] = useState(false);\n    const [success, setSuccess] = useState(false);\n    const [loading, setLoading] = useState(false);\n\n    const createProfile = async ({ userId, accessToken, nickname }) => {\n        let result;\n        try {\n            setLoading(true);\n            result = await user.accountProfiles.createProfile({ userId, auth: accessToken, nickname });\n            setSuccess(true);\n        } catch (err) {\n            setError(true);\n        }\n        setLoading(false);\n        return result;\n    };\n\n    return {\n        createProfile,\n        loading,\n        error,\n        success\n    };\n};\n\nexport default useCreateProfile;\n","import { useState, useContext } from 'react';\nimport { paths } from 'routes/constants';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useProfiles } from 'contexts/ProfilesContext';\nimport useCreateProfile from 'contexts/ProfilesContext/hooks/useCreateProfile/useCreateProfile';\nimport useUserOptions from 'hooks/useUserOptions';\nimport { CptElements, PageTypes, PageIds } from 'utils/tracking/constants';\nimport { sendElementClick } from 'utils/tracking/cpt';\nimport UserContext from '@itv/fe-components/UserContext';\n\nconst firstNameMaxChars = 10;\n\nconst useProfilesScreen = () => {\n    const { userId, accessToken } = useUserOptions();\n    const { createProfile, error: createProfileError } = useCreateProfile();\n    const {\n        setNewProfile,\n        mainProfile,\n        kidsProfile,\n        activeProfile,\n        selectProfile,\n        loadingProfiles,\n        fetchProfilesError,\n        setProfileToActivate,\n        profileBeingActivated,\n        profileBeingPINChallenged,\n        setProfileToPINChallenge,\n        clearProfileToPINChallenged\n    } = useProfiles();\n    const history = useHistory();\n    const location = useLocation();\n\n    const isEditMode = !!location?.state?.isEditMode;\n    const editProfileId = location?.state?.editProfileId;\n\n    const [displayProfileKeyboard, setDisplayProfileKeyboard] = useState(false);\n    const [displayPinChallenge, setDisplayPinChallenge] = useState(false);\n    const [isInEditMode, setIsInEditMode] = useState(isEditMode);\n    const [selectProfileError, setSelectProfileError] = useState(false);\n    const { refreshActiveProfile } = useContext(UserContext);\n\n    const onCreateKidsProfileClick = () => {\n        setDisplayProfileKeyboard(true);\n    };\n\n    const onProfileKeyboardClose = () => {\n        setDisplayProfileKeyboard(false);\n    };\n\n    const onPinChallengeClose = () => {\n        setProfileToActivate(null);\n        setDisplayPinChallenge(false);\n    };\n\n    const sendEditProfileClickEvent = (profile) => {\n        if (profile.isChild) {\n            sendElementClick('kids_profile_edit', CptElements.BUTTON, PageIds.EDIT_KIDS_PROFILE);\n        } else {\n            sendElementClick('adult_profile_edit', CptElements.BUTTON, PageIds.EDIT_ADULT_PROFILE);\n        }\n    };\n\n    const sendSelectProfileClickEvent = (profile) => {\n        if (profile.isChild) {\n            sendElementClick('kids_profile_select', CptElements.BUTTON, PageTypes.HOMEPAGE);\n        } else {\n            sendElementClick('adult_profile_select', CptElements.BUTTON, PageTypes.HOMEPAGE);\n        }\n    };\n\n    const onPinChallengeSuccess = () => {\n        if (isInEditMode && profileBeingPINChallenged) {\n            sendEditProfileClickEvent(profileBeingPINChallenged);\n            history.push(paths.editProfile.replace(':profileId', profileBeingPINChallenged.profileId));\n            clearProfileToPINChallenged();\n        } else {\n            sendSelectProfileClickEvent(profileBeingActivated);\n            selectProfile(profileBeingActivated);\n            setProfileToActivate(null);\n\n            history.push(paths.homepage);\n        }\n        setDisplayPinChallenge(false);\n        setProfileToPINChallenge(null);\n    };\n\n    const onCreateKidsProfile = async (nickname) => {\n        await createProfile({ userId, accessToken, nickname }).then((data) => setNewProfile(data));\n        onProfileKeyboardClose();\n    };\n\n    const onEditProfileSelect = (profile) => {\n        if (profile.isPinProtected) {\n            setProfileToPINChallenge(profile);\n            return setDisplayPinChallenge(true);\n        }\n\n        sendEditProfileClickEvent(profile);\n\n        return history.push(paths.editProfile.replace(':profileId', profile.profileId));\n    };\n\n    const onProfileSelect = async (profile) => {\n        if (activeProfile && activeProfile?.profileId === profile?.profileId) {\n            return;\n        }\n\n        if (profile.isPinProtected) {\n            setProfileToActivate(profile);\n            setDisplayPinChallenge(true);\n        } else {\n            try {\n                await refreshActiveProfile({ userId, profileId: profile.profileId });\n                selectProfile(profile);\n                sendSelectProfileClickEvent(profile);\n                history.push(paths.homepage);\n            } catch {\n                setSelectProfileError(true);\n            }\n        }\n    };\n\n    const initialFocus =\n        activeProfile?.profileId === kidsProfile?.profileId || editProfileId === kidsProfile?.profileId\n            ? 'kidsProfilesButtonsFocusGroup'\n            : 'profilesButtonsFocusGroup';\n\n    const getShortenedFirstName = (name) => (name.length <= firstNameMaxChars ? name : `${name.slice(0, firstNameMaxChars - 1)}...`);\n\n    const onEditButtonClicked = () => setIsInEditMode(!isInEditMode);\n\n    return {\n        onCreateKidsProfileClick,\n        onCreateKidsProfile,\n        onProfileKeyboardClose,\n        getShortenedFirstName,\n        onEditButtonClicked,\n        onProfileSelect,\n        onEditProfileSelect,\n        onPinChallengeClose,\n        onPinChallengeSuccess,\n        displayProfileKeyboard,\n        activeProfile,\n        mainProfile,\n        kidsProfile,\n        initialFocus,\n        isInEditMode,\n        loadingProfiles,\n        error: fetchProfilesError || createProfileError || selectProfileError,\n        editProfileId,\n        displayPinChallenge\n    };\n};\n\nexport default useProfilesScreen;\n","import React from 'react';\nimport Heading from '@itv/fe-components/Heading';\nimport FocusGroup from 'focus/FocusGroup';\nimport Button from 'components/Button';\nimport LoadingBar from 'components/LoadingBar';\nimport { ErrorModalContent } from 'components/ErrorModal';\nimport { ErrorTypes } from 'constants/errors';\nimport { ProfileType } from '@itv/fe-components/ProfileAvatar';\nimport ProfileButtonContainer from 'components/ProfileButton/container/ProfileButton';\nimport { parentalControlsDialogTypes } from 'contexts/ParentalControlsContext';\nimport { ParentalControlsDialogs } from 'components/ParentalControls';\nimport ProfileKeyboard from '../profileKeyboard/ProfileKeyboard';\nimport useProfilesScreen from './hooks/useProfilesScreen';\nimport './ProfilesScreen.scss';\n\nconst ProfilesScreen = () => {\n    const {\n        onCreateKidsProfileClick,\n        onCreateKidsProfile,\n        onProfileKeyboardClose,\n        getShortenedFirstName,\n        onEditButtonClicked,\n        onProfileSelect,\n        onEditProfileSelect,\n        onPinChallengeClose,\n        onPinChallengeSuccess,\n        displayProfileKeyboard,\n        activeProfile,\n        mainProfile,\n        kidsProfile,\n        initialFocus,\n        isInEditMode,\n        loadingProfiles,\n        error,\n        displayPinChallenge\n    } = useProfilesScreen();\n\n    if (error) {\n        return <ErrorModalContent error={{ type: ErrorTypes.DEFAULT }} />;\n    }\n\n    if (loadingProfiles) {\n        return <LoadingBar />;\n    }\n\n    const title = isInEditMode ? 'Select a profile to edit' : \"Who's watching?\";\n\n    return (\n        <FocusGroup id=\"profilesScreenFocusGroup\" className=\"ProfilesScreen\" initialFocus={initialFocus} stealFocus={isInEditMode}>\n            <Heading className=\"ProfilesScreen__header\">{title}</Heading>\n            <FocusGroup id=\"profilesButtonsFocusGroup\" className=\"ProfilesScreen__container\" jumpToLastFocus={!!kidsProfile}>\n                <FocusGroup orientation=\"column\" className=\"ProfilesScreen__profile-group\">\n                    <ProfileButtonContainer\n                        id=\"profile-controls-profile-button\"\n                        profileId={mainProfile.profileId}\n                        type={ProfileType.user}\n                        isPINProtected={mainProfile.isPinProtected}\n                        profileName={getShortenedFirstName(mainProfile.nickname)}\n                        onClick={() => (isInEditMode ? onEditProfileSelect(mainProfile) : onProfileSelect(mainProfile))}\n                        isEditing={isInEditMode}\n                    />\n                </FocusGroup>\n                <FocusGroup\n                    id=\"kidsProfilesButtonsFocusGroup\"\n                    orientation=\"column\"\n                    className=\"ProfilesScreen__profile-group\"\n                    initialFocus=\"profile-controls-profile-button-kid\"\n                    stealFocus={!isInEditMode}\n                >\n                    {kidsProfile && (\n                        <ProfileButtonContainer\n                            id=\"profile-controls-profile-button-kid\"\n                            profileId={kidsProfile.profileId}\n                            type={ProfileType.kids}\n                            isPINProtected={kidsProfile.isPinProtected}\n                            profileName={getShortenedFirstName(kidsProfile.nickname)}\n                            isEditing={isInEditMode}\n                            onClick={() => (isInEditMode ? onEditProfileSelect(kidsProfile) : onProfileSelect(kidsProfile))}\n                        />\n                    )}\n                    {!isInEditMode && !kidsProfile && (\n                        <ProfileButtonContainer\n                            id=\"profile-controls-profile-create-profile-button\"\n                            type={ProfileType.plus}\n                            onClick={onCreateKidsProfileClick}\n                            profileName=\"Kids Profile\"\n                        />\n                    )}\n                </FocusGroup>\n            </FocusGroup>\n            {activeProfile && !activeProfile.isChild && (\n                <FocusGroup id=\"ProfilesEditButtonFocusGroup\" className=\"ProfilesScreen__edit-button\">\n                    <Button id=\"ProfilesEditButton\" onClick={onEditButtonClicked}>\n                        {isInEditMode ? 'Done' : 'Edit profiles'}\n                    </Button>\n                </FocusGroup>\n            )}\n            {displayProfileKeyboard && <ProfileKeyboard onCancel={onProfileKeyboardClose} onConfirm={onCreateKidsProfile} />}\n            {displayPinChallenge && (\n                <ParentalControlsDialogs\n                    title=\"Please enter your PIN\"\n                    onCancel={onPinChallengeClose}\n                    onConfirm={onPinChallengeSuccess}\n                    initialDialog={parentalControlsDialogTypes.challengePin}\n                    disableOptionButtons\n                />\n            )}\n        </FocusGroup>\n    );\n};\n\nexport default ProfilesScreen;\n","import React from 'react';\nimport cn from 'classnames';\nimport { PageTypes, PageIds } from 'utils/tracking';\nimport Page from 'components/Page';\nimport './Profiles.scss';\nimport { grid, gridColumn, gridItem, gridItemAlignCenter, widthOneHalf } from '@itv/fe-components/cjs/common/styles/grid.cls';\nimport ProfilesScreen from 'pages/Profiles/components/profilesScreen/ProfilesScreen';\n\nconst Profiles = () => (\n    <Page id=\"ProfilesPage\" trackingPageType={PageTypes.ACCOUNT} trackingPageId={PageIds.PROFILES} className=\"Profiles\">\n        <div className={cn(grid, gridColumn)}>\n            <div className={cn(gridItem, gridItemAlignCenter, widthOneHalf)}>\n                <ProfilesScreen />\n            </div>\n        </div>\n    </Page>\n);\n\nexport default Profiles;\n","import { removeStorageItem, Keys, keysToPreserveOnAppReset } from 'utils/storage';\n\nconst shouldPreserveKey = ({ key }) => Object.values(keysToPreserveOnAppReset).every((keyToKeep) => keyToKeep !== key);\n\nconst removeLocalStorageKeys = () => {\n    const keysToRemove = Object.entries(Keys).reduce(\n        (accumulator, [key, value]) => (shouldPreserveKey({ key }) ? [...accumulator, value] : accumulator),\n        []\n    );\n\n    keysToRemove.forEach((key) => removeStorageItem(key));\n};\n\nexport default removeLocalStorageKeys;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'components/Button';\nimport ModalPortal from 'components/ModalPortal';\nimport OverlayModal, { OverlayButtons } from 'components/OverlayModal';\nimport { paths } from 'routes/constants';\nimport Heading from '@itv/fe-components/Heading';\nimport removeLocalStorageKeys from './removeLocalStorageKeys';\nimport { removeSignInSyncTokensCookies } from '../../../../helpers/syncSignIn';\n\nconst { homepage, about } = paths;\n\nconst reloadHome = () => {\n    removeLocalStorageKeys();\n    removeSignInSyncTokensCookies();\n\n    const previousPath = window.location.href;\n    const newPath = previousPath.replace(about, homepage);\n\n    window.location.href = newPath;\n};\n\nconst ResetAppModal = ({ hideDialog }) => (\n    <ModalPortal>\n        <OverlayModal>\n            <Heading element=\"h2\">Your settings will be reset and ITVX will reload.</Heading>\n            <OverlayButtons>\n                <Button onClick={reloadHome} backTo={hideDialog}>\n                    OK\n                </Button>\n            </OverlayButtons>\n        </OverlayModal>\n    </ModalPortal>\n);\n\nResetAppModal.propTypes = {\n    hideDialog: PropTypes.func.isRequired\n};\n\nexport default ResetAppModal;\n","import React, { useState, useCallback } from 'react';\nimport cn from 'classnames';\nimport { PageHeader } from 'components/Page';\nimport Button from 'components/Button';\nimport { PageTypes, PageIds } from 'utils/tracking';\nimport { REACT_APP_VERSION } from 'utils/envVarProvider';\nimport './About.scss';\nimport { grid, gridColumn, gridItem, gridItemAlignCenter } from '@itv/fe-components/cjs/common/styles/grid.cls';\nimport ResetAppModal from './ResetAppModal';\nimport SettingsPage from '../SettingsPage';\n\nconst About = () => {\n    const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n    const [stealFocus, setStealFocus] = useState(false);\n\n    const showDialog = useCallback(() => {\n        setShowConfirmDialog(true);\n        setStealFocus(false);\n    }, [setShowConfirmDialog, setStealFocus]);\n\n    const hideDialog = useCallback(() => {\n        setShowConfirmDialog(false);\n        setStealFocus(true);\n    }, [setShowConfirmDialog, setStealFocus]);\n\n    return (\n        <>\n            <SettingsPage id=\"aboutPage\" trackingPageType={PageTypes.GENERAL_INFO} trackingPageId={PageIds.ABOUT} stealFocus={stealFocus}>\n                <div className={cn(grid, gridColumn, 'About')}>\n                    <div className={cn(gridItem, gridItemAlignCenter, 'About__container')}>\n                        <PageHeader className=\"About__heading\" title={`ITVX: v${REACT_APP_VERSION}`} isLargerTitle />\n                        <p className=\"About__paragraph\">\n                            Pressing the &apos;reset&apos; button below will allow you to reset your ITVX settings. Please note, this will\n                            not reset your Parental Controls.\n                        </p>\n                        <p className=\"About__paragraph\">\n                            This will also require us to locate you again by postcode entry, and you&apos;ll need to sign into your ITVX\n                            account again once reset is complete.\n                        </p>\n                        <Button className=\"About__reset\" id=\"reset-settings\" backTo=\"about-link\" onClick={showDialog}>\n                            Reset\n                        </Button>\n                    </div>\n                </div>\n            </SettingsPage>\n            {showConfirmDialog && <ResetAppModal hideDialog={hideDialog} />}\n        </>\n    );\n};\n\nexport default About;\n"],"names":["i","useState","error","setError","success","setSuccess","loading","setLoading","createProfile","userId","accessToken","nickname","user","auth","result","useUserOptions","useCreateProfile","createProfileError","useProfiles","setNewProfile","mainProfile","kidsProfile","activeProfile","selectProfile","loadingProfiles","fetchProfilesError","setProfileToActivate","profileBeingActivated","profileBeingPINChallenged","setProfileToPINChallenge","clearProfileToPINChallenged","history","useHistory","location","useLocation","isEditMode","state","editProfileId","displayProfileKeyboard","setDisplayProfileKeyboard","displayPinChallenge","setDisplayPinChallenge","isInEditMode","setIsInEditMode","selectProfileError","setSelectProfileError","refreshActiveProfile","useContext","UserContext","onProfileKeyboardClose","sendEditProfileClickEvent","profile","isChild","sendElementClick","CptElements","PageIds","sendSelectProfileClickEvent","PageTypes","onCreateKidsProfile","then","data","onProfileSelect","profileId","isPinProtected","push","paths","initialFocus","onCreateKidsProfileClick","getShortenedFirstName","name","length","slice","firstNameMaxChars","onEditButtonClicked","onEditProfileSelect","onPinChallengeClose","onPinChallengeSuccess","useProfilesScreen","ErrorModal","type","ErrorTypes","LoadingBar","title","FocusGroup","id","className","stealFocus","Heading","jumpToLastFocus","orientation","ProfileButton","ProfileType","isPINProtected","profileName","onClick","isEditing","Button","ProfileKeyboard","onCancel","onConfirm","ParentalControls","initialDialog","parentalControlsDialogTypes","disableOptionButtons","Page","trackingPageType","trackingPageId","cn","grid","gridColumn","gridItem","gridItemAlignCenter","widthOneHalf","Object","entries","Keys","reduce","accumulator","key","value","values","keysToPreserveOnAppReset","every","keyToKeep","shouldPreserveKey","forEach","removeStorageItem","homepage","about","reloadHome","removeLocalStorageKeys","removeSignInSyncTokensCookies","newPath","window","href","replace","ResetAppModal","hideDialog","ModalPortal","OverlayModal","element","backTo","propTypes","PropTypes","showConfirmDialog","setShowConfirmDialog","setStealFocus","showDialog","useCallback","SettingsPage","PageHeader","REACT_APP_VERSION","isLargerTitle"],"sourceRoot":""}