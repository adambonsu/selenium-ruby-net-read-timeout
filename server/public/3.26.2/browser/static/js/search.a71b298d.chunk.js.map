{"version":3,"file":"static/js/search.a71b298d.chunk.js","mappings":"iMAoBA,MAhBA,WACI,IAAMA,GAAQC,EAAAA,EAAAA,KACRC,GAAUC,EAAAA,EAAAA,MACRC,GAAqBC,EAAAA,EAAAA,KAArBD,iBAUR,MAAO,CAAEE,aARY,WACbN,EAAMO,IAAI,gBACVH,IAEAF,EAAQM,QAEhB,EAGJ,C,8TCRMC,EAAW,CACbC,WAAY,EACZC,SAAU,KAGRC,EAAe,SAAH,GAA0C,IAAD,QAAnCC,EAAE,EAAFA,GAAIC,EAAU,EAAVA,WAAYC,EAAY,EAAZA,aAC9BC,GAAcC,EAAAA,EAAAA,cAAY,YAC5BC,EAAAA,EAAAA,SAAQ,CACJC,MAAOC,EAAAA,UAAAA,mBACPC,OAAQ,CACJC,QAASP,EAAaQ,cACtBC,QAASV,EAAWW,OACpBC,KAAMC,EAAAA,cAAAA,YAGlB,GAAG,CAACb,EAAYC,IAEhB,OAAe,OAAVD,QAAU,IAAVA,GAAAA,EAAYW,OAGb,gBAACG,EAAA,EAAM,CACHf,GAAIA,EACJgB,UAAU,eACVC,eAA4B,QAAb,EAAAhB,EAAW,UAAE,OAAkB,QAAlB,EAAb,EAAeiB,wBAAgB,WAAlB,EAAb,EAAiCC,WAAwB,QAAjB,EAAIlB,EAAW,UAAE,OAAoB,QAApB,EAAb,EAAemB,0BAAkB,WAApB,EAAb,EAAmCD,SAC9FE,cAAY,EACZC,iBAAe,EACfC,MAAOtB,EAAWuB,KAAI,SAACC,EAAWC,GAC9B,IAAQR,EAAyFO,EAAzFP,iBAAkBE,EAAuEK,EAAvEL,mBAAoBO,EAAmDF,EAAnDE,YAAaC,EAAsCH,EAAtCG,QAASC,EAA6BJ,EAA7BI,aAAcC,EAAeL,EAAfK,WAElF,OACI,gBAACC,EAAA,EAAa,CACV/B,IAAoB,OAAhBkB,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBC,WAA6B,OAAlBC,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBD,SACrDa,KAAqB,OAAhBd,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBC,WAA6B,OAAlBC,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBD,SACtDc,MAAMC,EAAAA,EAAAA,GAAY,CAAEJ,WAAAA,EAAYH,YAAAA,EAAaP,mBAAAA,IAC7CK,UAAWA,EACXU,YAAY,YACZC,SAAUV,EACVE,QAASA,EACTC,aAAcA,EACd3B,aAAcA,EACdN,SAAUA,EACVyC,QAASlC,GAGrB,MA3BwB,IA8BpC,EAEAJ,EAAauC,UAAY,CACrBrC,WAAYsC,IAAAA,QACRA,IAAAA,MAAgB,CACZrB,iBAAkBqB,IAAAA,MAAgB,CAC9BpB,QAASoB,IAAAA,OACTC,WAAYD,IAAAA,SAEhBnB,mBAAoBmB,IAAAA,MAAgB,CAChCpB,QAASoB,IAAAA,OACTC,WAAYD,IAAAA,SAEhBZ,YAAaY,IAAAA,UAEnBE,WACFvC,aAAcqC,IAAAA,OAAAA,WACdvC,GAAIuC,IAAAA,OAAAA,YAGR,QCtEMG,EAAgB,SAAH,OAAMxC,EAAY,EAAZA,aAAcD,EAAU,EAAVA,WAAU,OAC7C,2BAASe,UAAU,iBACf,gBAAC2B,EAAA,GAAO,CAACC,QAAQ,KAAK5B,UAAU,yBAC3Bf,EAAWW,OAAM,UAA+B,IAAtBX,EAAWW,OAAe,GAAK,IAAG,UAASV,GAE1E,gBAAC2C,EAAA,EAAc,KACX,gBAAC,EAAY,CACT7C,GAAG,eACHgC,IAAG,uBAAkB/B,EAAWW,OAAM,YAAIV,GAC1CD,WAAYA,EACZC,aAAcA,EACd4C,QAAQ,SACRC,OAAQ,OAGV,EAGdL,EAAcJ,UAAY,CACtBpC,aAAcqC,IAAAA,OAAAA,WACdtC,WAAYsC,IAAAA,QACRA,IAAAA,MAAgB,CACZrB,iBAAkBqB,IAAAA,MAAgB,CAC9BpB,QAASoB,IAAAA,OACTC,WAAYD,IAAAA,YAGtBE,YAGN,QCvBA,EATwB,WAAH,OACjB,uBAAKzB,UAAU,mBACX,gBAAC2B,EAAA,GAAO,CAACC,QAAQ,KAAK5B,UAAU,4BAA0B,2BAG1D,iEACE,E,qBCLJgC,EAAoB,CACtB,CAAEC,kBAJoB,IAAIC,OAAO,iBAAkB,KAIXC,YAN5B,IAOZ,CAAEF,kBAJiB,IAAIC,OAAO,UAAW,KAIJC,YARxB,MAqBjB,EAV0B,SAAH,OAAMjD,EAAY,EAAZA,aAAY,OACrCA,EACM8C,EACKI,QACG,SAACC,EAAY,GAAD,IAAIJ,EAAiB,EAAjBA,kBAAmBE,EAAW,EAAXA,YAAW,OAAOE,EAAYC,QAAQL,EAAmBE,EAAY,GACxGjD,GAEHqD,OACLrD,CAAa,EClBVsD,EAA4B,a,sBCuBzC,EApBwB,SAAH,GAA6C,IAAvCC,EAAiB,EAAjBA,kBACjBC,EADgD,EAAZxD,aACDyD,UAAU,EDLxB,ICOrBC,EAAiBH,EAAoBI,EAAAA,GAAAA,WAAAA,eAAiCC,EAAAA,GAAAA,UAAAA,iBAEtEC,EAAON,EAAoB,CAAC,CAAEO,SAAU,MAAOC,WAAYP,SAAyBQ,EAEpFC,EAAcV,EAAoB,CAACC,QAAuBQ,EAEhE,GAA0CE,EAAAA,EAAAA,GACtC,CACIR,eAAAA,EACAG,KAAAA,GAEJI,GAGJ,MAAO,CAAEE,cARK,EAANC,OAQwBC,QART,EAAPA,QAQyBC,aARJ,EAAZA,aAS7B,E,yoDCdA,IA0EA,EA1EkB,WACd,IAAMC,GAAWC,EAAAA,EAAAA,MACXrF,GAAUC,EAAAA,EAAAA,MACRqF,GAAeC,EAAAA,EAAAA,aAAfD,WACDxF,EAAuD,GAA9C0F,EAAAA,EAAAA,UAAS,IAAIC,gBAAgBL,EAASjE,SAAQ,GAAlD,GACgF,KAApDqE,EAAAA,EAAAA,UAAS1F,EAAMO,IAAI8D,IAA8B,IAAG,GAArFtD,EAAY,KAAE6E,EAAe,KAE9BtB,EAAoBkB,EAAW,cAErC,EAAiDK,EAAgB,CAC7DvB,kBAAAA,EACAvD,aAAAA,IAFImE,EAAa,EAAbA,cAAeE,EAAO,EAAPA,QAASC,EAAY,EAAZA,aAK1BS,GAAeC,EAAAA,EAAAA,UAAQ,WACzB,IAAMC,EAAK,IAAI3E,EAAAA,OAAAA,aAIf,OAHA2E,EAAGC,QAAQ5E,EAAAA,OAAAA,MAAAA,yBACX2E,EAAGC,QAAQ5E,EAAAA,OAAAA,MAAAA,gBACX2E,EAAGC,QAAQ5E,EAAAA,OAAAA,MAAAA,gBACJ2E,CACX,GAAG,KAEHE,EAAAA,EAAAA,YAAU,WACFhB,IAAkBZ,GAClBwB,EAAaK,QAAQjB,EAE7B,GAAG,CAACA,EAAeY,EAAcxB,IAEjC,IA4BQxD,EA5BFsF,GAAqBnF,EAAAA,EAAAA,cACvB,SAACoF,GACGT,EAAgBU,EAAkB,CAAEvF,aAAcsF,KAE9CA,EACArG,EAAMuG,IAAIlC,EAA2BgC,GAErCrG,EAAK,OAAQqE,GAEjB,IAAMmC,EAAWxG,EAAMyG,WACvBvG,EAAQiE,QAAQ,CACZ9C,OAAQmF,EAAQ,WAAOA,QAAazB,GAE5C,GACA,CAAC7E,EAASF,IAGR0G,EAAgB,CAClB5F,WAAY,KACZ6F,aAAa,EACbC,qBAAsBC,SAAS3B,GAAiBnE,GAChDqE,QAAAA,EACAgB,mBAAAA,EACArF,aAAAA,EACAsE,aAAAA,GAGJ,OAAItE,IAA6B,OAAbmE,QAAa,IAAbA,OAAa,EAAbA,EAAezD,QAAS,GAIpCX,EADAwD,EACaY,EAEAY,EAAazE,OAAON,EAAc,SAG5C,EAAP,KACO2F,GAAa,IAChB5F,WAAAA,EACA6F,YAAa7F,EAAWW,OAAS,IAAM2D,EACvCwB,qBAA4C,IAAtB9F,EAAWW,UAGlCiF,CACX,ECRA,EAtDsB,WAClB,IAAMxG,GAAUC,EAAAA,EAAAA,MAChB,EAAmH2G,IAA3G1B,EAAO,EAAPA,QAAStE,EAAU,EAAVA,WAAY6F,EAAW,EAAXA,YAAa5F,EAAY,EAAZA,aAAcqF,EAAkB,EAAlBA,mBAAoBQ,EAAoB,EAApBA,qBAAsBvB,EAAY,EAAZA,aAE1F/E,GAAiByG,EAAAA,EAAAA,KAAjBzG,aAuBR,OArBA4F,EAAAA,EAAAA,YAAU,WAYN,OAAO,WAAO,IAAD,EACHZ,EAAkB,OAAPpF,QAAO,IAAPA,GAAiB,QAAV,EAAPA,EAASoF,gBAAQ,WAAV,EAAP,EAAmB0B,UAChCL,GAAeC,GAAqC,YAAbtB,KAZ3CpE,EAAAA,EAAAA,SAAQ,CACJC,MAAOC,EAAAA,UAAAA,mBACPC,OAAQ,CACJC,QAAqB,OAAZP,QAAY,IAAZA,OAAY,EAAZA,EAAcQ,cACvBC,SAAmB,OAAVV,QAAU,IAAVA,OAAU,EAAVA,EAAYW,SAAU,EAC/BC,KAAMC,EAAAA,cAAAA,YAUlB,CAEJ,GAAG,CAACgF,EAAaC,EAAsB9F,IAEnCuE,EACO,gBAAC4B,EAAA,EAAiB,MAIzB,uBAAKpF,UAAWqF,IAAG,gBAAiBC,EAAAA,cAChC,gBAACC,EAAA,QAAU,CAACC,YAAY,SAASC,iBAAe,GAC5C,gBAACF,EAAA,QAAU,CAACjF,iBAAe,EAACmF,iBAAe,GACvC,2BAASzF,UAAU,mCACf,gBAAC0F,EAAA,EAAa,CACVC,OAAQlH,EACRmH,YAAY,8BACZC,cAAetB,EACfuB,aAAc5G,QAAgBgE,MAI1C,gBAAC,IAAc,CAACyC,OAAQxF,EAAAA,IACnB2E,GAAe,gBAAC,EAAa,CAAC5F,aAAcA,EAAcD,WAAYA,IACtE8F,GAAwB,gBAAC,EAAe,OAE5CxB,GAAW,gBAACwC,EAAA,QAAU,OAIvC,EC3DA,EANe,WAAH,OACR,gBAACC,EAAA,QAAI,CAACC,iBAAkBC,EAAAA,GAAAA,OAAgBC,eAAgBC,EAAAA,GAAAA,OAAkBC,cAAc,UACpF,gBAAC,EAAa,MACX,C","sources":["hooks/useDeepLinkBack/useDeepLinkBack.js","pages/Search/SearchResults/SearchSlider/SearchSlider.jsx","pages/Search/SearchResults/SearchResults.jsx","pages/Search/NoSearchResults/NoSearchResults.jsx","pages/Search/hooks/useSearch/cleanSearchPhrase.js","pages/Search/constants.js","pages/Search/hooks/useSearch/useSearchMethod.js","pages/Search/hooks/useSearch/useSearch.js","pages/Search/SearchContent/SearchContent.jsx","pages/Search/Search.jsx"],"sourcesContent":["import { useHistory } from 'react-router-dom';\nimport useQuery from 'hooks/useQuery';\nimport { useModal } from 'contexts/ModalContext';\n\nfunction useDeepLinkBack() {\n    const query = useQuery();\n    const history = useHistory();\n    const { toggleExitDialog } = useModal();\n\n    const handleBackTo = () => {\n        if (query.get('fromDeepLink')) {\n            toggleExitDialog();\n        } else {\n            history.goBack();\n        }\n    };\n\n    return { handleBackTo };\n}\n\nexport default useDeepLinkBack;\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { cptSend } from 'utils/tracking/cpt';\nimport { CptEvents, CptSearchType } from 'utils/tracking/constants';\nimport Slider from 'components/Slider';\nimport ProgrammeTile from 'components/ProgrammeTile';\nimport getTileLink from 'helpers/getTileLink';\n\nimport './SearchSlider.scss';\n\nconst throttle = {\n    horizontal: 0,\n    vertical: 350\n};\n\nconst SearchSlider = ({ id, programmes, searchPhrase }) => {\n    const handleClick = useCallback(() => {\n        cptSend({\n            event: CptEvents.SEARCH_CLICK_EVENT,\n            search: {\n                keyword: searchPhrase.toUpperCase(),\n                results: programmes.length,\n                type: CptSearchType.FREE_TEXT\n            }\n        });\n    }, [programmes, searchPhrase]);\n\n    if (!programmes?.length) return null;\n\n    return (\n        <Slider\n            id={id}\n            className=\"SearchSlider\"\n            activeFocusId={programmes[0]?.encodedEpisodeId?.letterA || programmes[0]?.encodedProgrammeId?.letterA}\n            backToMemory\n            optimiseRenders\n            items={programmes.map((programme, i) => {\n                const { encodedEpisodeId, encodedProgrammeId, programmeId, channel, episodeCount, entityType } = programme;\n\n                return (\n                    <ProgrammeTile\n                        id={encodedEpisodeId?.letterA || encodedProgrammeId?.letterA}\n                        key={encodedEpisodeId?.letterA || encodedProgrammeId?.letterA}\n                        link={getTileLink({ entityType, programmeId, encodedProgrammeId })}\n                        programme={programme}\n                        contentType=\"programme\"\n                        position={i}\n                        channel={channel}\n                        episodeCount={episodeCount}\n                        searchPhrase={searchPhrase}\n                        throttle={throttle}\n                        onClick={handleClick}\n                    />\n                );\n            })}\n        />\n    );\n};\n\nSearchSlider.propTypes = {\n    programmes: PropTypes.arrayOf(\n        PropTypes.shape({\n            encodedEpisodeId: PropTypes.shape({\n                letterA: PropTypes.string,\n                underscore: PropTypes.string\n            }),\n            encodedProgrammeId: PropTypes.shape({\n                letterA: PropTypes.string,\n                underscore: PropTypes.string\n            }),\n            programmeId: PropTypes.string\n        })\n    ).isRequired,\n    searchPhrase: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired\n};\n\nexport default SearchSlider;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ScrollableRows from 'components/ScrollableRows';\nimport Heading from '@itv/fe-components/Heading';\nimport SearchSlider from './SearchSlider';\nimport './SearchResults.scss';\n\nconst SearchResults = ({ searchPhrase, programmes }) => (\n    <section className=\"SearchResults\">\n        <Heading element=\"h3\" className=\"SearchResults__header\">\n            {programmes.length} Result{programmes.length === 1 ? '' : 's'} for - {searchPhrase}\n        </Heading>\n        <ScrollableRows>\n            <SearchSlider\n                id=\"SearchSlider\"\n                key={`SearchSlider-${programmes.length}-${searchPhrase}`}\n                programmes={programmes}\n                searchPhrase={searchPhrase}\n                rowType=\"slider\"\n                height={209}\n            />\n        </ScrollableRows>\n    </section>\n);\n\nSearchResults.propTypes = {\n    searchPhrase: PropTypes.string.isRequired,\n    programmes: PropTypes.arrayOf(\n        PropTypes.shape({\n            encodedEpisodeId: PropTypes.shape({\n                letterA: PropTypes.string,\n                underscore: PropTypes.string\n            })\n        })\n    ).isRequired\n};\n\nexport default SearchResults;\n","import React from 'react';\nimport Heading from '@itv/fe-components/Heading';\n\nimport './NoSearchResults.scss';\n\nconst NoSearchResults = () => (\n    <div className=\"NoSearchResults\">\n        <Heading element=\"h2\" className=\"NoSearchResults__heading\">\n            No search results found\n        </Heading>\n        <p>Try again or browse through our page</p>\n    </div>\n);\n\nexport default NoSearchResults;\n","const oneSpace = ' ';\nconst noSpace = '';\n\nconst invalidCharacters = new RegExp('[^a-zA-Z0-9 ]+', 'g');\nconst multipleSpaces = new RegExp('\\\\s{2,}', 'g');\n\nconst cleanupConditions = [\n    { regularExpression: invalidCharacters, replacement: noSpace },\n    { regularExpression: multipleSpaces, replacement: oneSpace }\n];\n\nconst cleanSearchPhrase = ({ searchPhrase }) =>\n    searchPhrase\n        ? cleanupConditions\n              .reduce(\n                  (accumulator, { regularExpression, replacement }) => accumulator.replace(regularExpression, replacement),\n                  searchPhrase\n              )\n              .trim()\n        : searchPhrase;\n\nexport default cleanSearchPhrase;\n","export const CHARACTER_LIMIT = 15;\nexport const QUERY_STRING_SEARCH_PARAM = 'searchTerm';\n","import { sayt, feeds } from '@itv/fe-cerberus';\nimport useCerberus from 'hooks/useCerberus';\nimport { CHARACTER_LIMIT } from '../../constants';\n\nconst useSearchMethod = ({ textSearchEnabled, searchPhrase }) => {\n    const searchTermWithLimit = searchPhrase.substring(0, CHARACTER_LIMIT);\n\n    const cerberusMethod = textSearchEnabled ? sayt.textSearch.getSearchItems : feeds.discovery.getAllProgrammes;\n\n    const args = textSearchEnabled ? [{ platform: 'CTV', searchTerm: searchTermWithLimit }] : undefined;\n\n    const observables = textSearchEnabled ? [searchTermWithLimit] : undefined;\n\n    const { result, loading, networkError } = useCerberus(\n        {\n            cerberusMethod,\n            args\n        },\n        observables\n    );\n\n    return { searchResults: result, loading, networkError };\n};\n\nexport default useSearchMethod;\n","import { useMemo, useState, useEffect, useCallback } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { search } from '@itv/fe-utils';\nimport { useDevice } from 'contexts/DeviceContext';\nimport cleanSearchPhrase from './cleanSearchPhrase';\nimport { QUERY_STRING_SEARCH_PARAM } from '../../constants';\nimport useSearchMethod from './useSearchMethod';\n\nconst useSearch = () => {\n    const location = useLocation();\n    const history = useHistory();\n    const { hasFeature } = useDevice();\n    const [query] = useState(new URLSearchParams(location.search));\n    const [searchPhrase, setSearchPhrase] = useState(query.get(QUERY_STRING_SEARCH_PARAM) || '');\n    // The old search service will eventually be removed https://itvplc.jira.com/browse/CDOT-463\n    const textSearchEnabled = hasFeature('textSearch');\n\n    const { searchResults, loading, networkError } = useSearchMethod({\n        textSearchEnabled,\n        searchPhrase\n    });\n\n    const searchEngine = useMemo(() => {\n        const se = new search.SearchEngine();\n        se.addRule(search.rules.IgnoreSpecialCharacters);\n        se.addRule(search.rules.FindFirstMatch);\n        se.addRule(search.rules.PrioritizeWord);\n        return se;\n    }, []);\n\n    useEffect(() => {\n        if (searchResults && !textSearchEnabled) {\n            searchEngine.setList(searchResults);\n        }\n    }, [searchResults, searchEngine, textSearchEnabled]);\n\n    const updateSearchPhrase = useCallback(\n        (newSearchPhrase) => {\n            setSearchPhrase(cleanSearchPhrase({ searchPhrase: newSearchPhrase }));\n\n            if (newSearchPhrase) {\n                query.set(QUERY_STRING_SEARCH_PARAM, newSearchPhrase);\n            } else {\n                query.delete(QUERY_STRING_SEARCH_PARAM);\n            }\n            const newQuery = query.toString();\n            history.replace({\n                search: newQuery ? `?${newQuery}` : undefined\n            });\n        },\n        [history, query]\n    );\n\n    const defaultReturn = {\n        programmes: null,\n        showResults: false,\n        showNoResultsMessage: Boolean(!searchResults && searchPhrase),\n        loading,\n        updateSearchPhrase,\n        searchPhrase,\n        networkError\n    };\n\n    if (searchPhrase && searchResults?.length > 0) {\n        let programmes;\n\n        if (textSearchEnabled) {\n            programmes = searchResults;\n        } else {\n            programmes = searchEngine.search(searchPhrase, 'title');\n        }\n\n        return {\n            ...defaultReturn,\n            programmes,\n            showResults: programmes.length > 0 && !loading,\n            showNoResultsMessage: programmes.length === 0\n        };\n    }\n    return defaultReturn;\n};\n\nexport default useSearch;\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport FocusGroup from 'focus/FocusGroup';\nimport cn from 'classnames';\nimport useDeepLinkBack from 'hooks/useDeepLinkBack';\nimport StandardEntry from 'components/StandardEntry';\nimport { BackToProvider } from 'contexts/BackToContext';\nimport LoadingBar from 'components/LoadingBar';\nimport NetworkErrorModal from 'components/NetworkErrorModal';\nimport { gridWrapper } from '@itv/fe-components/cjs/common/styles/grid.cls';\nimport { letterA } from 'components/StandardEntry/constants';\nimport { cptSend } from 'utils/tracking/cpt';\nimport { CptEvents, CptSearchType } from 'utils/tracking/constants';\nimport SearchResults from '../SearchResults';\nimport NoSearchResults from '../NoSearchResults';\nimport useSearch from '../hooks/useSearch/useSearch';\nimport './SearchContent.scss';\n\nconst SearchContent = () => {\n    const history = useHistory();\n    const { loading, programmes, showResults, searchPhrase, updateSearchPhrase, showNoResultsMessage, networkError } = useSearch();\n\n    const { handleBackTo } = useDeepLinkBack();\n\n    useEffect(() => {\n        const handleTracking = () => {\n            cptSend({\n                event: CptEvents.SEARCH_CLICK_EVENT,\n                search: {\n                    keyword: searchPhrase?.toUpperCase(),\n                    results: programmes?.length || 0,\n                    type: CptSearchType.FREE_TEXT\n                }\n            });\n        };\n\n        return () => {\n            const location = history?.location?.pathname;\n            if (showResults || showNoResultsMessage || location !== '/search') {\n                handleTracking();\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [showResults, showNoResultsMessage, programmes]);\n\n    if (networkError) {\n        return <NetworkErrorModal />;\n    }\n\n    return (\n        <div className={cn('SearchContent', gridWrapper)}>\n            <FocusGroup orientation=\"column\" jumpToLastFocus>\n                <FocusGroup optimiseRenders jumpToLastFocus>\n                    <section className=\"SearchContent__keyboard-section\">\n                        <StandardEntry\n                            backTo={handleBackTo}\n                            placeholder=\"Search for shows on ITV Hub\"\n                            onChangeValue={updateSearchPhrase}\n                            defaultValue={searchPhrase || undefined}\n                        />\n                    </section>\n                </FocusGroup>\n                <BackToProvider backTo={letterA}>\n                    {showResults && <SearchResults searchPhrase={searchPhrase} programmes={programmes} />}\n                    {showNoResultsMessage && <NoSearchResults />}\n                </BackToProvider>\n                {loading && <LoadingBar />}\n            </FocusGroup>\n        </div>\n    );\n};\n\nexport default SearchContent;\n","import React from 'react';\nimport Page from 'components/Page';\nimport { PageTypes, PageIds } from 'utils/tracking';\nimport SearchContent from './SearchContent';\n\nconst Search = () => (\n    <Page trackingPageType={PageIds.SEARCH} trackingPageId={PageTypes.SEARCH} trackingRoute=\"search\">\n        <SearchContent />\n    </Page>\n);\n\nexport default Search;\n"],"names":["query","useQuery","history","useHistory","toggleExitDialog","useModal","handleBackTo","get","goBack","throttle","horizontal","vertical","SearchSlider","id","programmes","searchPhrase","handleClick","useCallback","cptSend","event","CptEvents","search","keyword","toUpperCase","results","length","type","CptSearchType","Slider","className","activeFocusId","encodedEpisodeId","letterA","encodedProgrammeId","backToMemory","optimiseRenders","items","map","programme","i","programmeId","channel","episodeCount","entityType","ProgrammeTile","key","link","getTileLink","contentType","position","onClick","propTypes","PropTypes","underscore","isRequired","SearchResults","Heading","element","ScrollableRows","rowType","height","cleanupConditions","regularExpression","RegExp","replacement","reduce","accumulator","replace","trim","QUERY_STRING_SEARCH_PARAM","textSearchEnabled","searchTermWithLimit","substring","cerberusMethod","sayt","feeds","args","platform","searchTerm","undefined","observables","useCerberus","searchResults","result","loading","networkError","location","useLocation","hasFeature","useDevice","useState","URLSearchParams","setSearchPhrase","useSearchMethod","searchEngine","useMemo","se","addRule","useEffect","setList","updateSearchPhrase","newSearchPhrase","cleanSearchPhrase","set","newQuery","toString","defaultReturn","showResults","showNoResultsMessage","Boolean","useSearch","useDeepLinkBack","pathname","NetworkErrorModal","cn","gridWrapper","FocusGroup","orientation","jumpToLastFocus","StandardEntry","backTo","placeholder","onChangeValue","defaultValue","LoadingBar","Page","trackingPageType","PageIds","trackingPageId","PageTypes","trackingRoute"],"sourceRoot":""}